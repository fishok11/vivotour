%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: shutterstock_1068459137.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: ADMIN
%%CreationDate: 5/19/2021
%%BoundingBox: 0 0 369 288
%%HiResBoundingBox: 0 0 368.9432 288
%%CropBox: 0 0 368.9432 288
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2021-05-19T12:43:50+05:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>200</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAyAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qx7zj520zypBZ3Gox&#xA;TPBdTLC80UbOkKEgNJKwGwHIUHVuwxVhvnDW/NWuxafcaRYalo9kLqOKO5lvYdOa6WZ1HpiFub83&#xA;40iLUpXocVTW/wDzWt9FSG11rRdQstTeSOKO0KrN6qEgPJDNEWSXgNyuze2Ks9Rg6K4qAwBFQVO/&#xA;iDQj6cVbxV2KsF17z/qdh5kuNPiisodPs5rS3mnu5JxLLNdo0oSBIY5BXgh+2QK98VYn+lofOen2&#xA;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&#xA;IU8RKYCzRpNTd41duQU7VxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>441.000000</stDim:w>
            <stDim:h>353.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -288 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 288 li
368.943 288 li
368.943 0 li
cp
clp
94.4223 242.811 mo
94.3802 242.811 li
94.3802 242.811 li
94.4013 242.811 li
94.4013 242.811 li
94.4013 242.811 li
94.4223 242.811 li
94.4223 242.811 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
gsave
84.4686 242.811 mo
129.282 242.811 li
129.282 287.624 li
84.4686 287.624 li
84.4686 242.811 li
clp
89.1163 287.624 mo
89.1163 287.624 li
88.6138 287.624 88.2067 287.217 88.2067 286.715 cv
88.2067 268.022 li
88.2067 267.983 88.2091 267.945 88.2138 267.908 cv
88.5057 267.965 88.8075 267.995 89.1163 267.995 cv
90.0253 267.995 li
90.0255 268.004 90.0257 268.013 90.0257 268.022 cv
90.0257 286.715 li
90.0257 287.217 89.6185 287.624 89.1163 287.624 cv
.298039 .298039 .298039 rgb
f
94.7232 287.624 mo
94.7232 287.624 li
94.221 287.624 93.8136 287.217 93.8136 286.715 cv
93.8136 272.695 li
93.8136 272.193 94.221 271.785 94.7232 271.785 cv
95.2255 271.785 95.6326 272.193 95.6326 272.695 cv
95.6326 286.715 li
95.6326 287.217 95.2255 287.624 94.7232 287.624 cv
f
100.332 287.624 mo
100.332 287.624 li
99.8298 287.624 99.4227 287.217 99.4227 286.715 cv
99.4227 262.198 li
99.4227 261.882 99.5865 261.589 99.8556 261.423 cv
100.001 261.334 100.166 261.288 100.332 261.288 cv
100.472 261.288 100.613 261.321 100.742 261.386 cv
104.243 263.155 li
104.245 263.156 li
104.512 263.291 104.804 263.36 105.099 263.36 cv
105.338 263.36 105.577 263.315 105.804 263.224 cv
108.936 261.794 li
108.943 261.791 li
109.473 261.563 109.859 260.978 109.848 260.472 cv
109.847 260.322 109.82 260.176 109.757 260.025 cv
109.644 259.755 109.472 259.536 109.277 259.392 cv
109.08 259.248 108.868 259.17 108.596 259.168 cv
108.429 259.168 108.235 259.2 108.007 259.288 cv
106.251 259.967 li
106.249 259.968 li
105.927 260.092 105.588 260.154 105.25 260.154 cv
105.25 260.154 105.249 260.154 105.249 260.154 cv
104.721 260.154 104.195 260.004 103.739 259.709 cv
100.631 257.699 li
100.59 257.67 li
100.294 257.453 100.03 257.248 99.6649 257.081 cv
99.3009 256.916 98.839 256.782 98.1402 256.78 cv
97.5283 256.78 li
97.0258 256.78 96.6187 256.373 96.6187 255.871 cv
96.6187 255.369 97.0258 254.961 97.5283 254.961 cv
98.1402 254.961 li
98.1442 254.961 98.1481 254.961 98.1521 254.961 cv
99.0897 254.961 99.843 255.16 100.422 255.427 cv
100.986 255.684 101.387 256 101.639 256.184 cv
104.727 258.181 li
104.884 258.283 105.065 258.335 105.249 258.335 cv
105.366 258.335 105.484 258.313 105.597 258.27 cv
105.595 258.271 li
107.352 257.591 li
107.768 257.43 108.189 257.349 108.596 257.349 cv
108.599 257.349 108.601 257.349 108.604 257.349 cv
109.265 257.349 109.879 257.571 110.36 257.931 cv
110.846 258.291 111.206 258.778 111.433 259.32 cv
111.592 259.696 111.667 260.09 111.667 260.472 cv
111.667 260.472 li
111.655 261.785 110.847 262.924 109.685 263.451 cv
109.692 263.448 li
106.539 264.888 li
106.505 264.903 li
106.053 265.087 105.576 265.179 105.099 265.179 cv
104.523 265.179 103.948 265.045 103.422 264.778 cv
103.423 264.779 li
101.242 263.677 li
101.242 286.715 li
101.242 287.217 100.834 287.624 100.332 287.624 cv
106.161 264.061 mo
106.161 264.061 li
f
94.4126 253.976 mo
94.4089 253.976 94.405 253.976 94.4013 253.976 cv
94.3975 253.976 94.3938 253.976 94.39 253.976 cv
93.0152 253.976 91.8092 253.284 91.0113 252.261 cv
90.2036 251.232 89.7549 249.87 89.7536 248.394 cv
89.7549 246.917 90.2036 245.555 91.0113 244.526 cv
91.8076 243.504 93.0096 242.814 94.3802 242.811 cv
94.4223 242.811 li
95.793 242.814 96.9954 243.504 97.7918 244.526 cv
98.5998 245.555 99.0485 246.917 99.0498 248.394 cv
99.0498 248.394 li
99.0498 248.394 li
99.0498 248.394 li
99.0483 249.87 98.5998 251.232 97.7918 252.261 cv
96.9937 253.285 95.7877 253.976 94.4126 253.976 cv
94.4013 244.63 mo
93.6304 244.633 92.9717 244.987 92.4405 245.651 cv
91.9167 246.314 91.5715 247.289 91.5728 248.394 cv
91.5713 249.498 91.9167 250.473 92.4405 251.135 cv
92.9719 251.8 93.6306 252.154 94.4013 252.157 cv
95.1724 252.154 95.8313 251.8 96.3627 251.135 cv
96.8867 250.473 97.2319 249.498 97.2306 248.394 cv
97.2319 247.289 96.8867 246.314 96.3627 245.651 cv
95.8315 244.987 95.1726 244.633 94.4013 244.63 cv
99.0498 248.394 mo
99.0498 248.394 li
99.0498 248.394 li
f
92.3883 267.995 mo
90.0253 267.995 li
89.1163 267.995 li
88.8075 267.995 88.5057 267.965 88.2138 267.908 cv
86.0783 267.487 84.469 265.606 84.4686 263.347 cv
84.4686 261.478 li
84.4693 257.878 87.3857 254.962 90.9862 254.961 cv
91.9203 254.961 li
92.4225 254.961 92.8296 255.369 92.8296 255.871 cv
92.8296 256.373 92.4225 256.78 91.9203 256.78 cv
90.9862 256.78 li
89.6853 256.781 88.5164 257.305 87.6635 258.156 cv
86.812 259.009 86.2882 260.178 86.2878 261.478 cv
86.2878 263.347 li
86.2905 264.91 87.554 266.174 89.1163 266.177 cv
92.3883 266.177 li
93.1763 266.175 93.8143 265.536 93.8157 264.75 cv
93.8143 263.961 93.1767 263.324 92.3883 263.322 cv
90.0521 263.322 li
89.5498 263.322 89.1427 262.915 89.1427 262.413 cv
89.1427 261.911 89.5498 261.504 90.0521 261.504 cv
92.3883 261.504 li
94.1816 261.504 95.6343 262.957 95.6347 264.75 cv
95.6338 266.542 94.1821 267.995 92.3883 267.995 cv
f
128.372 270.799 mo
104.106 270.799 li
103.604 270.799 103.197 270.392 103.197 269.89 cv
103.197 269.388 103.604 268.981 104.106 268.981 cv
127.463 268.98 li
127.463 244.63 li
101.448 244.63 li
100.946 244.63 100.539 244.222 100.539 243.72 cv
100.539 243.218 100.946 242.811 101.448 242.811 cv
128.372 242.811 li
128.612 242.811 128.846 242.908 129.015 243.077 cv
129.185 243.246 129.282 243.48 129.282 243.72 cv
129.282 269.89 li
129.282 270.129 129.185 270.364 129.015 270.533 cv
128.846 270.702 128.612 270.799 128.372 270.799 cv
f
grestore
120.853 244.028 mo
120.376 244.963 119.778 246.393 119.774 247.865 cv
119.774 248.218 119.81 248.574 119.893 248.924 cv
120.058 249.645 120.443 250.134 120.895 250.429 cv
121.573 250.871 122.312 250.982 122.896 251.318 cv
123.475 251.653 123.969 252.125 124.258 253.434 cv
124.47 254.431 124.507 255.197 124.541 255.955 cv
124.574 256.71 124.602 257.462 124.809 258.365 cv
125.053 259.432 125.67 260.3 126.381 260.951 cv
127.094 261.604 127.901 262.047 128.59 262.274 cv
128.812 262.346 129.05 262.225 129.123 262.003 cv
129.195 261.781 129.074 261.543 128.852 261.47 cv
128.29 261.288 127.566 260.893 126.952 260.328 cv
126.335 259.763 125.828 259.034 125.633 258.176 cv
125.445 257.358 125.418 256.679 125.385 255.918 cv
125.352 255.159 125.311 254.323 125.084 253.258 cv
124.877 252.271 124.506 251.593 124.04 251.128 cv
123.339 250.431 122.505 250.246 121.901 249.997 cv
121.594 249.874 121.346 249.743 121.156 249.56 cv
120.966 249.377 120.815 249.139 120.715 248.728 cv
120.649 248.451 120.619 248.161 120.619 247.865 cv
120.616 246.628 121.155 245.283 121.605 244.414 cv
121.712 244.207 121.63 243.952 121.422 243.845 cv
121.215 243.739 120.96 243.82 120.853 244.028 cv
cp
.298039 .298039 .298039 rgb
f
105.944 260.178 mo
107.521 258.619 109.098 257.074 110.846 256.016 cv
110.845 256.017 li
111.762 255.464 112.716 255.062 113.646 255.062 cv
113.648 255.062 li
113.658 255.062 li
114.575 255.064 115.513 255.484 116.1 256.374 cv
116.438 256.885 116.629 257.559 116.628 258.237 cv
116.628 258.539 116.591 258.841 116.515 259.129 cv
116.406 259.555 116.203 259.927 116.003 260.356 cv
115.805 260.782 115.614 261.275 115.615 261.889 cv
115.615 261.995 115.62 262.104 115.632 262.217 cv
115.729 263.133 116.178 263.975 116.879 264.444 cv
117.348 264.741 117.767 264.83 118.025 265.044 cv
118.024 265.043 li
118.322 265.275 118.546 265.682 118.696 266.2 cv
118.846 266.714 118.921 267.322 118.967 267.904 cv
118.967 267.906 li
119.002 268.315 119.032 268.752 119.095 269.194 cv
119.128 269.425 119.342 269.585 119.573 269.552 cv
119.804 269.519 119.964 269.305 119.931 269.074 cv
119.874 268.673 119.844 268.252 119.809 267.834 cv
119.809 267.836 li
119.76 267.23 119.684 266.574 119.507 265.963 cv
119.329 265.356 119.049 264.778 118.547 264.379 cv
118.545 264.378 li
118.078 264.026 117.624 263.935 117.344 263.738 cv
116.908 263.458 116.539 262.822 116.473 262.13 cv
116.46 261.889 li
116.461 261.451 116.587 261.106 116.769 260.712 cv
116.949 260.321 117.19 259.892 117.333 259.342 cv
117.427 258.981 117.473 258.608 117.473 258.237 cv
117.472 257.405 117.247 256.58 116.806 255.909 cv
116.053 254.766 114.831 254.216 113.658 254.217 cv
113.642 254.217 li
113.644 254.217 li
112.472 254.222 111.388 254.706 110.409 255.293 cv
110.408 255.294 li
108.544 256.424 106.929 258.019 105.35 259.577 cv
105.184 259.741 105.183 260.009 105.347 260.175 cv
105.511 260.341 105.778 260.342 105.944 260.179 cv
cp
f
108.867 244.643 mo
108.878 244.643 li
109.514 244.643 110.123 244.715 110.636 244.83 cv
110.633 244.83 li
111.161 244.949 112.179 245.307 112.648 245.556 cv
112.999 245.736 113.335 246.173 113.444 246.7 cv
113.475 246.849 113.49 246.996 113.49 247.139 cv
113.493 247.87 113.097 248.533 112.59 248.909 cv
112.086 249.279 111.639 249.373 111.125 249.377 cv
110.465 249.381 109.712 249.179 108.845 249.175 cv
108.479 249.174 108.091 249.214 107.69 249.33 cv
106.372 249.716 105.132 250.827 104.367 252.215 cv
104.256 252.42 104.331 252.677 104.535 252.789 cv
104.74 252.901 104.997 252.825 105.109 252.621 cv
105.768 251.405 106.898 250.43 107.924 250.142 cv
108.236 250.052 108.539 250.02 108.845 250.02 cv
109.569 250.016 110.31 250.217 111.125 250.222 cv
111.754 250.225 112.44 250.077 113.094 249.587 cv
113.8 249.061 114.332 248.174 114.335 247.139 cv
114.335 246.938 114.314 246.732 114.271 246.525 cv
114.107 245.769 113.654 245.134 113.041 244.808 cv
112.453 244.503 111.451 244.153 110.823 244.006 cv
110.821 244.006 li
110.243 243.876 109.577 243.799 108.878 243.798 cv
108.864 243.798 li
108.63 243.799 108.442 243.989 108.443 244.222 cv
108.444 244.456 108.633 244.644 108.867 244.643 cv
cp
f
176.561 103.115 mo
162.459 103.115 li
162.459 82.0114 li
206.723 82.0114 li
206.723 103.115 li
196.636 103.115 li
196.636 105.024 li
208.632 105.024 li
208.632 80.1024 li
160.55 80.1024 li
160.55 105.024 li
176.561 105.024 li
176.561 103.115 li
cp
f
196.636 100.572 mo
201.155 100.572 li
201.155 100.069 li
201.157 98.688 202.275 97.5697 203.663 97.5695 cv
204.167 97.5695 li
204.167 87.5565 li
203.663 87.5565 li
202.275 87.554 201.157 86.4357 201.155 85.058 cv
201.155 84.5545 li
168.028 84.5545 li
168.028 85.058 li
168.027 85.787 167.808 86.406 167.408 86.8385 cv
167.005 87.2692 166.411 87.5527 165.518 87.5565 cv
165.015 87.5565 li
165.015 97.5695 li
165.518 97.5695 li
166.906 97.5695 168.025 98.6885 168.028 100.069 cv
168.028 100.572 li
176.561 100.572 li
176.561 99.5655 li
168.531 99.5655 li
168.531 100.069 li
169.035 100.069 li
169.034 98.1295 167.459 96.566 165.518 96.5625 cv
165.518 97.066 li
166.022 97.066 li
166.022 88.06 li
165.518 88.06 li
165.518 88.5635 li
166.632 88.5673 167.544 88.1783 168.147 87.5222 cv
168.751 86.868 169.035 85.9859 169.035 85.058 cv
168.531 85.058 li
168.531 85.5615 li
200.651 85.5615 li
200.651 85.058 li
200.148 85.058 li
200.148 86.9943 201.721 88.5634 203.663 88.5635 cv
203.663 88.06 li
203.16 88.06 li
203.16 97.066 li
203.663 97.066 li
203.663 96.5625 li
201.722 96.566 200.148 98.13 200.148 100.069 cv
200.651 100.069 li
200.651 99.5655 li
196.636 99.5655 li
196.636 100.572 li
cp
f
172.545 93.5665 mo
174.553 93.5665 li
174.553 92.5595 li
172.545 92.5595 li
f
193.625 93.5665 mo
195.633 93.5665 li
195.633 92.5595 li
193.625 92.5595 li
f
180.416 94.878 mo
180.198 94.3236 180.076 93.7121 180.076 93.0669 cv
180.026 93.0669 li
180.076 93.0677 li
180.076 93.0669 li
180.026 93.0669 li
180.076 93.0677 li
180.076 93.0593 li
180.076 91.8011 180.538 90.6702 181.271 89.8594 cv
182.006 89.0483 182.999 88.561 184.093 88.5604 cv
185.187 88.5619 186.178 89.0494 186.912 89.86 cv
187.643 90.6703 188.104 91.8001 188.104 93.0569 cv
188.104 93.0779 li
188.607 93.063 li
188.104 93.063 li
188.104 93.7112 187.982 94.3261 187.763 94.8794 cv
188.699 95.2505 li
188.966 94.5778 189.111 93.8368 189.111 93.063 cv
189.11 93.0481 li
188.711 93.0599 li
189.111 93.0599 li
189.11 93.0481 li
188.711 93.0599 li
189.111 93.0599 li
189.111 93.0569 li
189.11 91.5534 188.561 90.1843 187.659 89.1852 cv
186.759 88.1864 185.494 87.554 184.094 87.5534 cv
182.692 87.5529 181.425 88.1851 180.524 89.1842 cv
179.621 90.1837 179.07 91.5538 179.069 93.0586 cv
179.572 93.059 li
179.069 93.0502 li
179.069 93.0669 li
179.069 93.84 179.216 94.5769 179.479 95.2459 cv
180.416 94.878 li
cp
f
183.538 101.068 mo
183.537 99.4324 182.21 98.1118 180.576 98.1115 cv
178.942 98.1117 177.615 99.4323 177.614 101.068 cv
177.614 110.819 li
177.612 111.997 177.316 112.741 177.049 113.198 cv
176.915 113.426 176.786 113.581 176.7 113.672 cv
176.608 113.762 li
176.596 113.772 li
176.886 114.136 li
176.611 113.761 li
176.596 113.772 li
176.886 114.136 li
176.611 113.761 li
177.176 114.53 li
177.539 113.647 li
177.256 114.337 li
177.644 113.699 li
177.539 113.647 li
177.256 114.337 li
177.644 113.699 li
177.508 113.921 li
177.671 113.717 li
177.644 113.699 li
177.508 113.921 li
177.671 113.717 li
177.663 113.719 177.185 113.298 176.526 111.637 cv
176.526 111.638 li
176.031 110.392 175.333 109.505 174.538 108.946 cv
173.745 108.384 172.88 108.167 172.119 108.168 cv
171.615 108.169 171.153 108.259 170.751 108.407 cv
170.349 108.56 170.004 108.755 169.714 109.069 cv
169.372 109.431 169.162 109.973 169.173 110.484 cv
169.18 111.131 169.403 111.717 169.74 112.406 cv
170.082 113.095 170.564 113.89 171.197 114.882 cv
171.431 115.245 171.683 115.811 171.931 116.469 cv
172.308 117.457 172.688 118.651 173.168 119.787 cv
173.654 120.921 174.223 122.017 175.124 122.817 cv
175.125 122.817 li
176.071 123.644 176.755 124.259 177.146 124.721 cv
177.342 124.951 177.462 125.138 177.528 125.281 cv
177.593 125.427 177.612 125.525 177.614 125.648 cv
177.614 126.702 177.614 128.086 177.614 128.086 cv
179.523 128.086 li
179.523 128.086 179.523 126.702 179.523 125.648 cv
179.524 125.246 179.429 124.845 179.263 124.486 cv
179.012 123.944 178.633 123.49 178.158 123.005 cv
177.681 122.522 177.096 122.006 176.382 121.381 cv
176.382 121.381 li
176.037 121.081 175.692 120.602 175.378 120.006 cv
174.904 119.113 174.502 117.978 174.111 116.876 cv
173.714 115.77 173.343 114.706 172.806 113.854 cv
172.187 112.886 171.732 112.128 171.45 111.558 cv
171.163 110.989 171.074 110.612 171.082 110.484 cv
171.092 110.379 171.079 110.422 171.131 110.349 cv
171.13 110.349 li
171.145 110.331 171.27 110.244 171.45 110.185 cv
171.631 110.122 171.866 110.077 172.119 110.077 cv
172.532 110.079 172.984 110.187 173.437 110.505 cv
173.888 110.825 174.363 111.373 174.753 112.344 cv
174.753 112.345 li
175.233 113.544 175.651 114.254 175.995 114.7 cv
176.337 115.143 176.618 115.332 176.813 115.413 cv
177.12 115.539 177.475 115.495 177.742 115.299 cv
177.821 115.24 178.266 114.895 178.695 114.166 cv
179.125 113.439 179.525 112.328 179.523 110.819 cv
179.523 101.068 li
179.524 100.492 179.992 100.022 180.576 100.02 cv
181.159 100.022 181.628 100.492 181.629 101.068 cv
183.538 101.068 li
cp
f
187.553 110.074 mo
187.553 97.066 li
187.552 95.4301 186.224 94.1105 184.591 94.1104 cv
182.958 94.1134 181.629 95.4301 181.629 97.066 cv
181.629 110.074 li
183.538 110.074 li
183.538 97.066 li
183.539 96.4899 184.007 96.0195 184.591 96.0194 cv
185.174 96.0205 185.643 96.4898 185.644 97.066 cv
185.644 110.074 li
187.553 110.074 li
cp
f
191.569 104.07 mo
191.569 100.069 li
191.568 98.4331 190.239 97.1154 188.604 97.1124 cv
186.971 97.113 185.645 98.4335 185.644 100.069 cv
187.553 100.069 li
187.554 99.4924 188.023 99.0225 188.604 99.0215 cv
189.191 99.0216 189.659 99.4928 189.66 100.069 cv
189.66 104.07 li
191.569 104.07 li
cp
f
193.576 128.086 mo
193.576 128.086 193.576 126.932 193.576 125.408 cv
193.577 125.243 193.621 125.089 193.766 124.828 cv
193.977 124.442 194.425 123.906 194.836 123.142 cv
195.247 122.376 195.587 121.36 195.583 120.054 cv
195.583 104.07 li
195.581 102.435 194.255 101.116 192.621 101.115 cv
190.986 101.115 189.66 102.437 189.66 104.07 cv
189.66 110.074 li
191.569 110.074 li
191.569 104.07 li
191.57 103.495 192.036 103.025 192.621 103.024 cv
193.204 103.025 193.673 103.496 193.674 104.07 cv
193.674 120.054 li
193.663 121.376 193.282 122.076 192.827 122.786 cv
192.597 123.138 192.337 123.479 192.103 123.891 cv
191.872 124.298 191.665 124.811 191.667 125.408 cv
191.667 126.932 191.667 128.086 191.667 128.086 cv
193.576 128.086 li
cp
f
28.9432 4 mo
34.9432 4 li
34.9432 2 li
28.9432 2 li
.313726 .313726 .313726 rgb
f
30.9432 3 mo
30.9432 7 li
32.9432 7 li
32.9432 3 li
f
22.6503 10.2929 mo
20.6503 8.29289 li
19.2361 9.70711 li
21.2361 11.7071 li
f
18.6503 10.7071 mo
21.6503 7.70711 li
20.2361 6.29289 li
17.2361 9.29289 li
f
42.6503 11.7071 mo
44.6503 9.70711 li
43.2361 8.29289 li
41.2361 10.2929 li
f
46.6503 9.29289 mo
43.6503 6.29289 li
42.2361 7.70711 li
45.2361 10.7071 li
f
32.9432 25 mo
32.9432 15 li
30.9432 15 li
30.9432 25 li
f
17.3875 19.3597 mo
19.0127 12.8371 24.914 7.99798 31.9432 8 cv
36.0882 8.0005 39.8319 9.67726 42.5496 12.3932 cv
45.2657 15.1108 46.9427 18.8545 46.9432 23 cv
46.9445 29.2946 43.064 34.6834 37.568 36.909 cv
38.3184 38.763 li
44.5484 36.2425 48.9419 30.1334 48.9432 23 cv
48.9425 13.6103 41.3318 6.00064 31.9432 6 cv
23.9764 6.00202 17.2896 11.4769 15.4468 18.8763 cv
17.3875 19.3597 li
cp
f
11.9432 29.999 mo
11.9432 28.999 li
11.0345 28.9945 10.3267 28.6475 9.79681 28.0716 cv
9.27171 27.4942 8.94347 26.6679 8.94319 25.714 cv
8.94319 24.285 li
8.94347 23.3311 9.27171 22.5048 9.79681 21.9273 cv
10.3267 21.3515 11.0345 21.0045 11.9432 21 cv
12.8513 21.0045 13.5592 21.3514 14.0893 21.9274 cv
14.6145 22.5049 14.9429 23.3313 14.9432 24.285 cv
14.9432 25.714 li
14.9429 26.6677 14.6145 27.494 14.0893 28.0716 cv
13.5592 28.6475 12.8513 28.9945 11.9432 28.999 cv
11.9432 29.999 li
11.9432 30.999 li
13.3981 31.0034 14.6902 30.3914 15.5694 29.4166 cv
16.4534 28.4434 16.9435 27.1273 16.9432 25.714 cv
16.9432 24.285 li
16.9435 22.8717 16.4534 21.5555 15.5694 20.5823 cv
14.6902 19.6076 13.3981 18.9955 11.9432 19 cv
10.4879 18.9955 9.1957 19.6075 8.31657 20.5824 cv
7.43267 21.5557 6.9429 22.8718 6.94319 24.285 cv
6.94319 25.714 li
6.9429 27.1271 7.43267 28.4433 8.31657 29.4166 cv
9.1957 30.3914 10.4879 31.0035 11.9432 30.999 cv
11.9432 29.999 li
cp
f
3.93631 45.1171 mo
3.93667 45.114 4.10008 43.7282 4.30682 42.035 cv
4.51341 40.3428 4.76347 38.3431 4.93337 37.1398 cv
4.93344 37.1393 li
5.08233 36.0812 5.46226 35.2923 5.96063 34.7861 cv
6.46385 34.2826 7.07916 34.007 7.94319 34 cv
9.48861 34 li
16.4696 42 li
22.9242 42 li
22.9242 41 li
21.9304 41.111 li
22.2305 41.0775 li
21.93 41.1077 li
21.9304 41.111 li
22.2305 41.0775 li
21.93 41.1077 li
21.931 41.1169 21.9432 41.2443 21.9431 41.4391 cv
21.9487 41.869 21.8673 42.6218 21.5811 43.1321 cv
21.4393 43.3909 21.2669 43.5893 21.0272 43.7376 cv
20.7859 43.8838 20.4569 43.998 19.9242 44 cv
17.9142 44 13.9492 44 13.9432 44 cv
13.9432 45 li
14.7114 44.3598 li
9.71141 38.3598 li
8.17497 39.6402 li
13.4748 46 li
13.9432 46 li
13.9454 46 14.9359 46 16.1799 46 cv
17.4239 46 18.9192 46 19.9242 46 cv
20.7601 46.002 21.4927 45.8009 22.0741 45.4418 cv
22.9539 44.9007 23.4227 44.0689 23.6605 43.3318 cv
23.9012 42.5869 23.9417 41.8966 23.9431 41.4391 cv
23.9431 41.1228 23.9212 40.9181 23.918 40.889 cv
23.8187 40 li
17.3788 40 li
10.3978 32 li
7.94319 32 li
6.60722 31.993 5.39403 32.4984 4.53301 33.3854 cv
3.66712 34.2696 3.14705 35.4807 2.95294 36.8607 cv
2.95301 36.8602 li
2.60561 39.3222 1.95067 44.8785 1.95007 44.8829 cv
3.93631 45.1171 li
cp
f
18.7752 38.5547 mo
22.4784 33 li
36.177 33 li
31.377 41 li
24.9432 41 li
24.9432 43 li
31.9432 43 li
32.294 43 32.6202 42.8153 32.8007 42.5145 cv
38.8007 32.5145 li
38.9861 32.2054 38.991 31.821 38.8134 31.5073 cv
38.6358 31.1936 38.3037 31 37.9432 31 cv
21.9432 31 li
21.6088 31 21.2966 31.1671 21.1111 31.4453 cv
17.1111 37.4453 li
18.7752 38.5547 li
cp
f
9.94319 46 mo
39.9432 46 li
39.9432 44 li
9.94319 44 li
f
30.9432 10 mo
30.9432 13 li
32.9432 13 li
32.9432 10 li
f
22.8203 13.6839 mo
24.7493 15.9819 li
26.2811 14.6961 li
24.3521 12.398 li
f
18.9665 21.7267 mo
21.9205 22.2477 li
22.2679 20.2781 li
19.3139 19.7571 li
f
43.7012 28.634 mo
41.1032 27.134 li
40.1032 28.866 li
42.7012 30.366 li
f
44.5715 19.7571 mo
41.6175 20.2781 li
41.9649 22.2477 li
44.9189 21.7267 li
f
39.5333 12.398 mo
37.6043 14.6961 li
39.1361 15.9819 li
41.0651 13.6839 li
f
109.943 46 mo
86.9432 46 li
86.3912 45.999 85.9442 45.5514 85.9432 45 cv
85.9432 8 li
85.9442 7.44725 86.3905 7.001 86.9432 7 cv
90.9432 7 li
90.9432 5 li
86.9432 5 li
85.2859 5.00034 83.9435 6.34267 83.9432 8 cv
83.9432 45 li
83.9439 46.6565 85.2852 47.9992 86.9432 48 cv
109.943 48 li
109.943 46 li
cp
f
114.943 7 mo
118.943 7 li
119.495 7.001 119.942 7.44791 119.943 8 cv
119.943 23 li
121.943 23 li
121.943 8 li
121.942 6.34201 120.6 5.00063 118.943 5 cv
114.943 5 li
114.943 7 li
cp
f
107.943 42 mo
89.9432 42 li
89.9432 11 li
90.9432 11 li
90.9432 9 li
87.9432 9 li
87.9432 44 li
107.943 44 li
107.943 42 li
cp
f
114.943 11 mo
115.943 11 li
115.943 23 li
117.943 23 li
117.943 9 li
114.943 9 li
114.943 11 li
cp
f
109.943 5 mo
109.943 4 li
106.943 4 li
106.943 5 li
107.943 5 li
107.943 2.23735 105.705 .000495911 102.943 0 cv
100.181 .000347376 97.9435 2.23768 97.9432 5 cv
98.9432 5 li
98.9432 4 li
95.9432 4 li
93.7336 4.00057 91.9438 5.79037 91.9432 8 cv
91.9432 12 li
113.943 12 li
113.943 7.99896 li
113.942 5.7896 112.152 4.00085 109.943 4 cv
109.943 5 li
109.943 6 li
111.047 6.002 111.941 6.89631 111.943 7.99896 cv
111.943 10 li
93.9432 10 li
93.9432 8 li
93.9452 6.89554 94.8388 6.002 95.9432 6 cv
99.9432 6 li
99.9432 5 li
99.9462 3.34227 101.285 2.003 102.943 2 cv
104.6 2.003 105.94 3.3426 105.943 5 cv
105.943 6 li
109.943 6 li
109.943 5 li
cp
f
101.943 4 mo
101.943 6 li
103.943 6 li
103.943 4 li
f
127.943 38 mo
126.943 38 li
126.943 40.2119 126.049 42.2057 124.6 43.6566 cv
123.149 45.106 121.155 45.9995 118.943 46 cv
116.731 45.9995 114.737 45.106 113.286 43.6567 cv
111.837 42.2057 110.944 40.212 110.943 38 cv
110.944 35.7874 111.837 33.7938 113.286 32.343 cv
114.737 30.8938 116.731 30.0005 118.943 30 cv
121.155 30.0005 123.149 30.8938 124.6 32.343 cv
126.049 33.7938 126.943 35.7875 126.943 38 cv
127.943 38 li
128.943 38 li
128.943 32.4763 124.466 28.0006 118.943 28 cv
113.42 28.0006 108.944 32.4764 108.943 38 cv
108.944 43.5226 113.419 47.9993 118.943 48 cv
124.466 47.9993 128.942 43.5228 128.943 38 cv
127.943 38 li
cp
f
119.943 29 mo
119.943 26 li
117.943 26 li
117.943 29 li
f
115.943 27 mo
121.943 27 li
121.943 25 li
115.943 25 li
f
113.65 30.2929 mo
111.65 28.2929 li
110.236 29.7071 li
112.236 31.7071 li
f
125.65 31.7071 mo
127.65 29.7071 li
126.236 28.2929 li
124.236 30.2929 li
f
117.943 32 mo
117.943 39 li
119.943 39 li
119.943 32 li
f
94.9432 19 mo
109.943 19 li
109.943 17 li
94.9432 17 li
f
94.9432 23 mo
109.943 23 li
109.943 21 li
94.9432 21 li
f
94.9432 27 mo
102.943 27 li
102.943 25 li
94.9432 25 li
f
173.943 29.999 mo
173.943 28.999 li
173.034 28.9945 172.327 28.6475 171.797 28.0716 cv
171.272 27.4942 170.943 26.6679 170.943 25.714 cv
170.943 24.285 li
170.943 23.3311 171.272 22.5048 171.797 21.9273 cv
172.327 21.3515 173.034 21.0045 173.943 21 cv
174.851 21.0045 175.559 21.3514 176.089 21.9274 cv
176.615 22.5049 176.943 23.3313 176.943 24.285 cv
176.943 25.714 li
176.943 26.6677 176.615 27.494 176.089 28.0716 cv
175.559 28.6475 174.851 28.9945 173.943 28.999 cv
173.943 29.999 li
173.943 30.999 li
175.398 31.0034 176.69 30.3914 177.569 29.4166 cv
178.453 28.4434 178.943 27.1273 178.943 25.714 cv
178.943 24.285 li
178.943 22.8717 178.453 21.5555 177.569 20.5823 cv
176.69 19.6076 175.398 18.9955 173.943 19 cv
172.488 18.9955 171.196 19.6075 170.317 20.5824 cv
169.433 21.5557 168.943 22.8718 168.943 24.285 cv
168.943 25.714 li
168.943 27.1271 169.433 28.4433 170.317 29.4166 cv
171.196 30.3914 172.488 31.0035 173.943 30.999 cv
173.943 29.999 li
cp
f
166.936 45.1171 mo
166.937 45.114 167.1 43.7282 167.307 42.0351 cv
167.513 40.3428 167.763 38.3431 167.933 37.1398 cv
167.933 37.1393 li
168.082 36.0812 168.462 35.2923 168.961 34.7861 cv
169.464 34.2826 170.079 34.007 170.943 34 cv
172.489 34 li
179.47 42 li
185.924 42 li
185.924 41 li
184.93 41.1109 li
185.23 41.0775 li
184.93 41.1076 li
184.93 41.1109 li
185.23 41.0775 li
184.93 41.1076 li
184.931 41.1168 184.943 41.2443 184.943 41.4391 cv
184.949 41.869 184.867 42.6219 184.581 43.1322 cv
184.439 43.3909 184.267 43.5894 184.027 43.7376 cv
183.786 43.8838 183.457 43.998 182.924 44 cv
180.914 44 176.949 44 176.943 44 cv
176.943 45 li
177.711 44.3598 li
172.711 38.3598 li
171.175 39.6402 li
176.475 46 li
176.943 46 li
176.945 46 177.936 46 179.18 46 cv
180.424 46 181.919 46 182.924 46 cv
183.76 46.002 184.493 45.8009 185.074 45.4418 cv
185.954 44.9008 186.423 44.069 186.66 43.3319 cv
186.901 42.5869 186.942 41.8967 186.943 41.4391 cv
186.943 41.1229 186.921 40.9181 186.918 40.8891 cv
186.819 40 li
180.379 40 li
173.398 32 li
170.943 32 li
169.607 31.993 168.394 32.4984 167.533 33.3854 cv
166.667 34.2696 166.147 35.4807 165.953 36.8607 cv
165.953 36.8602 li
165.606 39.3222 164.951 44.8785 164.95 44.8829 cv
166.936 45.1171 li
cp
f
181.775 38.5547 mo
185.478 33 li
196.177 33 li
191.377 41 li
187.943 41 li
187.943 43 li
191.943 43 li
192.294 43 192.62 42.8153 192.801 42.5145 cv
198.801 32.5145 li
198.986 32.2054 198.991 31.821 198.813 31.5073 cv
198.636 31.1936 198.304 31 197.943 31 cv
184.943 31 li
184.609 31 184.297 31.1671 184.111 31.4453 cv
180.111 37.4453 li
181.775 38.5547 li
cp
f
172.943 46 mo
200.943 46 li
200.943 44 li
172.943 44 li
f
198.943 24 mo
199.843 23.5637 li
197.943 19.6453 li
197.943 14 li
197.942 10.1332 194.809 7.00068 190.943 7 cv
187.077 7.00058 183.944 10.1334 183.943 14 cv
183.943 19.6454 li
181.347 25 li
200.539 25 li
199.843 23.5637 li
198.943 24 li
198.943 23 li
184.539 23 li
185.943 20.1047 li
185.943 14 li
185.944 12.6159 186.501 11.3723 187.408 10.4643 cv
188.315 9.55803 189.559 9.0005 190.943 9 cv
192.327 9.00049 193.57 9.55801 194.478 10.4644 cv
195.385 11.3724 195.943 12.616 195.943 14 cv
195.943 20.1046 li
198.043 24.4363 li
198.943 24 li
198.943 23 li
198.943 24 li
cp
f
187.943 28 mo
193.943 28 li
193.943 26 li
187.943 26 li
f
191.943 8 mo
191.943 5 li
189.943 5 li
189.943 8 li
f
181.943 11 mo
181.946 9.34227 183.285 8.003 184.943 8 cv
184.943 6 li
182.181 6.00035 179.944 8.23768 179.943 11 cv
181.943 11 li
cp
f
177.943 10 mo
177.944 8.33996 178.613 6.84629 179.701 5.75735 cv
180.789 4.67 182.283 4.0005 183.943 4 cv
183.943 2 li
179.525 2.00065 175.944 5.5813 175.943 10 cv
177.943 10 li
cp
f
201.943 11 mo
201.943 8.23734 199.705 6.0005 196.943 6 cv
196.943 8 li
198.6 8.003 199.94 9.34261 199.943 11 cv
201.943 11 li
cp
f
205.943 10 mo
205.943 5.5813 202.362 2.00064 197.943 2 cv
197.943 4 li
199.603 4.0005 201.097 4.67 202.186 5.75735 cv
203.273 6.84629 203.943 8.33995 203.943 10 cv
205.943 10 li
cp
f
286.943 18 mo
285.943 18 li
285.943 21.3164 284.601 24.3101 282.428 26.485 cv
280.253 28.6583 277.26 29.9995 273.943 30 cv
270.626 29.9995 267.633 28.6582 265.458 26.485 cv
263.285 24.3102 261.944 21.3165 261.943 18 cv
261.944 14.6829 263.285 11.6893 265.458 9.51459 cv
267.632 7.34151 270.626 6.0005 273.943 6 cv
277.26 6.00049 280.253 7.3415 282.428 9.51461 cv
284.601 11.6893 285.943 14.683 285.943 18 cv
286.943 18 li
287.943 18 li
287.942 10.2672 281.675 4.00066 273.943 4 cv
266.211 4.00062 259.944 10.2673 259.943 18 cv
259.944 25.7316 266.21 31.9993 273.943 32 cv
281.675 31.9993 287.942 25.7317 287.943 18 cv
286.943 18 li
cp
f
272.943 9 mo
272.943 18.5662 li
278.429 21.8575 li
279.458 20.1425 li
274.943 17.4338 li
274.943 9 li
272.943 9 li
cp
f
251.942 26 mo
250.942 26 li
250.943 28.2091 252.733 29.9989 254.942 30 cv
257.152 29.9991 258.942 28.2092 258.943 26 cv
258.942 23.7899 257.152 22.0006 254.942 22 cv
252.733 22.0008 250.943 23.7899 250.942 26 cv
251.942 26 li
252.942 26 li
252.944 24.896 253.839 24.002 254.942 24 cv
256.047 24.002 256.941 24.896 256.943 26 cv
256.941 27.1027 256.046 27.998 254.942 28 cv
253.839 27.998 252.944 27.1028 252.942 26 cv
251.942 26 li
cp
f
257.347 13.8491 mo
255.8 16.7 li
256.679 17.1769 li
256.874 16.196 li
256.239 16.0703 255.589 16.005 254.933 16.005 cv
254.465 16.005 253.994 16.0381 253.522 16.1062 cv
253.665 17.0959 li
254.568 16.6651 li
253.172 13.7411 li
252.947 13.2701 252.398 13.0513 251.911 13.2384 cv
248.652 14.4894 li
248.164 14.6765 247.903 15.2067 248.051 15.7072 cv
248.972 18.8142 li
249.931 18.53 li
249.374 17.6996 li
248.424 18.3368 247.609 19.1222 246.946 20.0088 cv
247.746 20.608 li
248.079 19.6651 li
245.021 18.5842 li
244.529 18.4102 243.987 18.6435 243.775 19.1204 cv
242.356 22.3094 li
242.143 22.7863 242.333 23.3459 242.792 23.5949 cv
245.643 25.1419 li
246.12 24.2629 li
245.139 24.0685 li
245.014 24.703 244.948 25.3528 244.948 26.0093 cv
244.948 26.4771 244.981 26.9485 245.049 27.42 cv
246.039 27.277 li
245.608 26.3745 li
242.684 27.7705 li
242.213 27.9954 241.995 28.544 242.182 29.0313 cv
243.433 32.2903 li
243.62 32.7776 244.15 33.039 244.65 32.8907 cv
247.758 31.9698 li
247.474 31.011 li
246.643 31.567 li
247.28 32.519 248.066 33.3334 248.952 33.9966 cv
249.551 33.196 li
248.608 32.8624 li
247.526 35.9204 li
247.352 36.4125 247.586 36.9555 248.063 37.1676 cv
251.253 38.5867 li
251.73 38.7988 252.289 38.6087 252.538 38.1499 cv
254.085 35.2989 li
253.206 34.822 li
253.012 35.8029 li
253.646 35.9286 254.296 35.994 254.952 35.994 cv
255.42 35.994 255.892 35.9608 256.363 35.8927 cv
256.22 34.903 li
255.318 35.3338 li
256.714 38.2578 li
256.939 38.7289 257.487 38.9476 257.975 38.7605 cv
261.234 37.5096 li
261.721 37.3225 261.982 36.7922 261.834 36.2918 cv
260.913 33.1848 li
259.954 33.469 li
260.511 34.2994 li
261.461 33.6624 262.276 32.8779 262.94 31.9897 cv
262.139 31.391 li
261.806 32.3337 li
264.862 33.4157 li
265.53 31.5303 li
262.473 30.4483 li
262.06 30.3022 261.6 30.4415 261.338 30.7923 cv
260.806 31.5041 260.156 32.1295 259.397 32.6386 cv
259.033 32.8826 258.871 33.3333 258.995 33.7532 cv
259.654 35.9737 li
258.12 36.5622 li
257.123 34.4721 li
256.934 34.0769 256.511 33.8506 256.077 33.9132 cv
255.701 33.9675 255.326 33.994 254.952 33.994 cv
254.429 33.994 253.909 33.9419 253.401 33.841 cv
252.971 33.7559 252.536 33.9601 252.327 34.345 cv
251.221 36.3836 li
249.72 35.716 li
250.494 33.5295 li
250.64 33.1167 250.501 32.6578 250.15 32.3954 cv
249.438 31.8625 248.813 31.2129 248.305 30.4549 cv
248.062 30.091 247.61 29.9278 247.19 30.0522 cv
244.968 30.7105 li
244.38 29.1773 li
246.47 28.1794 li
246.865 27.9907 247.092 27.5674 247.029 27.134 cv
246.975 26.7582 246.948 26.3827 246.948 26.0093 cv
246.948 25.4855 247 24.9661 247.101 24.4573 cv
247.186 24.0278 246.982 23.5928 246.597 23.384 cv
244.559 22.2779 li
245.226 20.7778 li
247.413 21.5508 li
247.826 21.6968 248.284 21.5578 248.547 21.2072 cv
249.079 20.4957 249.73 19.8691 250.488 19.3604 cv
250.852 19.1164 251.014 18.6656 250.89 18.2458 cv
250.232 16.0252 li
251.765 15.4367 li
252.763 17.5268 li
252.951 17.922 253.375 18.1483 253.808 18.0857 cv
254.184 18.0314 254.559 18.005 254.933 18.005 cv
255.457 18.005 255.976 18.0571 256.485 18.1579 cv
256.914 18.243 257.349 18.0388 257.558 17.6539 cv
259.105 14.8029 li
257.347 13.8491 li
cp
f
275.684 33.0984 mo
275.687 33.2055 li
275.685 33.9055 275.372 34.5879 274.769 35.0391 cv
274.77 35.0389 li
274.356 35.3471 273.882 35.4926 273.406 35.4934 cv
272.707 35.4919 272.026 35.1789 271.577 34.5785 cv
271.578 34.5791 li
271.271 34.1662 271.126 33.695 271.125 33.2192 cv
271.125 33.1895 li
269.125 33.1545 li
269.125 33.2192 li
269.124 34.1084 269.404 35.0108 269.975 35.7748 cv
269.975 35.7754 li
270.814 36.8983 272.106 37.4948 273.406 37.4933 cv
274.296 37.4941 275.2 37.2142 275.967 36.641 cv
275.967 36.6408 li
277.092 35.8001 277.688 34.5063 277.687 33.2055 cv
277.682 33.0055 li
275.684 33.0984 li
cp
f
265.997 34.9727 mo
263.84 36.3927 li
263.62 36.5375 263.464 36.7683 263.411 37.0262 cv
263.358 37.2841 263.41 37.5579 263.555 37.7779 cv
265.39 40.5649 li
265.694 41.0262 266.313 41.1539 266.775 40.8504 cv
268.932 39.4314 li
268.382 38.5959 li
267.691 39.3191 li
268.35 39.9481 269.116 40.4738 269.967 40.8655 cv
270.385 39.957 li
269.406 39.755 li
268.885 42.282 li
268.773 42.8229 269.121 43.3518 269.662 43.4633 cv
272.931 44.1374 li
273.189 44.1905 273.463 44.1381 273.683 43.9933 cv
273.903 43.8485 274.059 43.6178 274.113 43.3599 cv
274.634 40.8329 li
273.654 40.631 li
273.678 41.6307 li
274.616 41.608 275.527 41.427 276.379 41.1119 cv
276.032 40.174 li
275.197 40.7237 li
276.616 42.8797 li
276.919 43.3411 277.539 43.4689 278.001 43.1654 cv
280.789 41.3314 li
281.012 41.1846 281.165 40.9596 281.219 40.6979 cv
281.272 40.4363 281.221 40.1692 281.074 39.9461 cv
279.654 37.7891 li
278.819 38.339 li
279.542 39.0297 li
280.171 38.3716 280.698 37.606 281.089 36.7529 cv
280.18 36.336 li
279.978 37.3154 li
282.505 37.8364 li
282.763 37.8896 283.037 37.8371 283.257 37.6923 cv
283.477 37.5475 283.633 37.3168 283.687 37.0589 cv
284.361 33.7899 li
284.414 33.532 284.361 33.2581 284.216 33.0382 cv
284.072 32.8182 283.841 32.6617 283.583 32.6085 cv
281.056 32.0876 li
280.652 34.0464 li
282.2 34.3654 li
281.93 35.6757 li
280.382 35.3566 li
279.927 35.2627 279.465 35.4964 279.271 35.9191 cv
278.974 36.566 278.575 37.1463 278.096 37.6483 cv
277.775 37.9846 277.728 38.5005 277.984 38.8889 cv
278.854 40.2103 li
277.737 40.9451 li
276.867 39.6242 li
276.612 39.2358 276.122 39.0747 275.685 39.236 cv
275.034 39.4769 274.342 39.6139 273.63 39.6313 cv
273.165 39.6426 272.769 39.9736 272.675 40.4291 cv
272.356 41.9766 li
271.045 41.7065 li
271.365 40.1589 li
271.458 39.7035 271.225 39.2428 270.803 39.0485 cv
270.155 38.7502 269.574 38.3518 269.073 37.8728 cv
268.737 37.5516 268.221 37.5049 267.833 37.7605 cv
266.511 38.6301 li
265.775 37.5133 li
267.097 36.6432 li
265.997 34.9727 li
cp
f
331.943 31.999 mo
331.943 30.999 li
331.034 30.9945 330.327 30.6475 329.797 30.0716 cv
329.272 29.4942 328.943 28.6679 328.943 27.714 cv
328.943 26.285 li
328.943 25.3311 329.272 24.5048 329.797 23.9273 cv
330.327 23.3515 331.034 23.0045 331.943 23 cv
332.851 23.0045 333.559 23.3514 334.089 23.9274 cv
334.615 24.5049 334.943 25.3313 334.943 26.285 cv
334.943 27.714 li
334.943 28.6677 334.615 29.494 334.089 30.0716 cv
333.559 30.6475 332.851 30.9945 331.943 30.999 cv
331.943 31.999 li
331.943 32.999 li
333.398 33.0034 334.69 32.3914 335.569 31.4166 cv
336.453 30.4434 336.943 29.1273 336.943 27.714 cv
336.943 26.285 li
336.943 24.8717 336.453 23.5555 335.569 22.5823 cv
334.69 21.6076 333.398 20.9955 331.943 21 cv
330.488 20.9955 329.196 21.6075 328.317 22.5824 cv
327.433 23.5557 326.943 24.8718 326.943 26.285 cv
326.943 27.714 li
326.943 29.1271 327.433 30.4433 328.317 31.4166 cv
329.196 32.3914 330.488 33.0035 331.943 32.999 cv
331.943 31.999 li
cp
f
323.936 47.1171 mo
323.937 47.114 324.1 45.7282 324.307 44.0351 cv
324.513 42.3428 324.763 40.3431 324.933 39.1398 cv
324.933 39.1393 li
325.082 38.0812 325.462 37.2923 325.961 36.7861 cv
326.464 36.2826 327.079 36.007 327.943 36 cv
329.489 36 li
336.47 44 li
342.924 44 li
342.924 43 li
341.93 43.1108 li
342.229 43.0775 li
341.93 43.1075 li
341.93 43.1108 li
342.229 43.0775 li
341.93 43.1075 li
341.931 43.1168 341.943 43.2443 341.943 43.4391 cv
341.949 43.869 341.867 44.6219 341.581 45.1322 cv
341.439 45.3909 341.267 45.5894 341.027 45.7376 cv
340.786 45.8838 340.457 45.998 339.924 46 cv
337.914 46 333.949 46 333.943 46 cv
333.943 47 li
334.711 46.3598 li
329.711 40.3598 li
328.175 41.6402 li
333.475 48 li
333.943 48 li
333.945 48 334.936 48 336.18 48 cv
337.424 48 338.919 48 339.924 48 cv
340.76 48.002 341.493 47.8009 342.074 47.4418 cv
342.954 46.9008 343.423 46.069 343.66 45.3319 cv
343.901 44.5869 343.942 43.8967 343.943 43.4391 cv
343.943 43.1229 343.921 42.9182 343.918 42.8892 cv
343.819 42 li
337.379 42 li
330.398 34 li
327.943 34 li
326.607 33.993 325.394 34.4984 324.533 35.3854 cv
323.667 36.2696 323.147 37.4807 322.953 38.8607 cv
322.953 38.8602 li
322.606 41.3222 321.951 46.8785 321.95 46.8829 cv
323.936 47.1171 li
cp
f
338.775 40.5547 mo
342.478 35 li
358.177 35 li
353.377 43 li
344.943 43 li
344.943 45 li
353.943 45 li
354.294 45 354.62 44.8153 354.801 44.5145 cv
360.801 34.5145 li
360.986 34.2054 360.991 33.821 360.813 33.5073 cv
360.636 33.1936 360.304 33 359.943 33 cv
341.943 33 li
341.609 33 341.297 33.1671 341.111 33.4453 cv
337.111 39.4453 li
338.775 40.5547 li
cp
f
329.943 48 mo
361.943 48 li
361.943 46 li
329.943 46 li
f
341.943 1 mo
341.943 2 li
363.943 2 li
365.046 2.002 365.941 2.89598 365.943 4 cv
365.943 20 li
365.94 21.6562 364.599 22.997 362.943 23 cv
349.943 23 li
349.629 23 349.332 23.1487 349.143 23.4 cv
344.943 29 li
344.944 28.9993 li
344.935 29.009 li
344.958 29.0366 li
344.946 29.0032 li
344.935 29.009 li
344.958 29.0366 li
344.946 29.0032 li
344.953 29.0216 li
344.953 29.0016 li
344.946 29.0032 li
344.953 29.0216 li
344.953 29.0016 li
344.934 28.9954 li
344.909 29.0229 li
344.942 29.0079 li
344.934 28.9954 li
344.909 29.0229 li
344.942 29.0079 li
344.92 29.0178 li
344.944 29.0127 li
344.942 29.0079 li
344.92 29.0178 li
344.944 29.0127 li
344.943 29 li
344.943 24 li
344.943 23.7367 344.836 23.4791 344.65 23.2929 cv
344.464 23.1067 344.206 23 343.943 23 cv
341.943 23 li
340.839 22.998 339.945 22.1032 339.943 21 cv
339.943 4 li
339.945 2.89553 340.839 2.002 341.943 2 cv
341.943 1 li
341.943 0 li
339.734 .000569105 337.944 1.79038 337.943 4 cv
337.943 21 li
337.944 23.2087 339.733 24.9991 341.943 25 cv
342.943 25 li
342.943 29 li
342.939 29.5817 343.198 30.1224 343.579 30.4665 cv
343.96 30.8148 344.445 30.9999 344.953 31.0016 cv
345.524 31.0091 346.151 30.7324 346.543 30.2007 cv
346.543 30.2 li
350.443 25 li
362.943 25 li
365.705 24.9993 367.942 22.7617 367.943 20 cv
367.943 4 li
367.942 1.78993 366.152 .000767946 363.943 0 cv
341.943 0 li
341.943 1 li
cp
f
358.943 14 mo
357.943 14 li
357.943 15.3834 357.385 16.6271 356.478 17.5353 cv
355.57 18.4418 354.327 18.9995 352.943 19 cv
351.559 18.9995 350.316 18.4418 349.408 17.5353 cv
348.501 16.6272 347.944 15.3835 347.943 14 cv
347.944 12.6159 348.501 11.3723 349.408 10.4643 cv
350.315 9.55803 351.559 9.0005 352.943 9 cv
354.327 9.00049 355.57 9.55801 356.478 10.4644 cv
357.385 11.3724 357.943 12.616 357.943 14 cv
358.943 14 li
359.943 14 li
359.942 10.1332 356.809 7.00068 352.943 7 cv
349.077 7.00058 345.944 10.1334 345.943 14 cv
345.944 17.8656 349.076 20.9993 352.943 21 cv
356.809 20.9992 359.942 17.8659 359.943 14 cv
358.943 14 li
cp
f
353.943 8 mo
353.943 5 li
351.943 5 li
351.943 8 li
f
350.943 6 mo
354.943 6 li
354.943 4 li
350.943 4 li
f
349.65 8.29289 mo
347.65 6.29289 li
346.236 7.70711 li
348.236 9.70711 li
f
357.65 9.70711 mo
359.65 7.70711 li
358.236 6.29289 li
356.236 8.29289 li
f
351.943 10 mo
351.943 15 li
353.943 15 li
353.943 10 li
f
355.943 101 mo
354.943 101 li
354.943 104.316 353.601 107.31 351.428 109.485 cv
349.253 111.658 346.26 112.999 342.943 113 cv
339.626 112.999 336.633 111.658 334.458 109.485 cv
332.285 107.31 330.944 104.316 330.943 101 cv
330.944 97.6829 332.285 94.6893 334.458 92.5146 cv
336.632 90.3415 339.626 89.0005 342.943 89 cv
346.26 89.0005 349.253 90.3415 351.428 92.5146 cv
353.601 94.6893 354.943 97.683 354.943 101 cv
355.943 101 li
356.943 101 li
356.942 93.2672 350.675 87.0007 342.943 87 cv
335.211 87.0006 328.944 93.2673 328.943 101 cv
328.944 108.732 335.21 114.999 342.943 115 cv
350.675 114.999 356.942 108.732 356.943 101 cv
355.943 101 li
cp
f
352.943 122 mo
354.508 121.999 355.979 121.85 357.29 121.497 cv
358.597 121.142 359.76 120.582 360.645 119.712 cv
362.301 118.078 363.114 115.993 363.521 113.981 cv
363.929 111.963 363.942 109.982 363.943 108.458 cv
363.943 108.3 363.943 108.147 363.943 108 cv
363.943 106 li
361.943 106 li
361.943 108 li
361.943 108.149 361.943 108.302 361.943 108.458 cv
361.944 109.962 361.922 111.808 361.561 113.584 cv
361.201 115.363 360.513 117.036 359.241 118.288 cv
358.689 118.835 357.851 119.274 356.768 119.566 cv
355.688 119.858 354.378 120.001 352.943 120 cv
352.943 122 li
cp
f
365.943 103 mo
364.943 103 li
364.941 104.103 364.046 104.998 362.943 105 cv
361.839 104.998 360.945 104.103 360.943 103 cv
360.945 101.896 361.839 101.002 362.943 101 cv
364.046 101.002 364.941 101.896 364.943 103 cv
365.943 103 li
366.943 103 li
366.942 100.79 365.152 99.0008 362.943 99 cv
360.734 99.0006 358.944 100.79 358.943 103 cv
358.944 105.209 360.733 106.999 362.943 107 cv
365.152 106.999 366.942 105.209 366.943 103 cv
365.943 103 li
cp
f
341.943 100 mo
341.943 102 li
343.943 102 li
343.943 100 li
f
338.943 118 mo
338.943 113 li
336.943 113 li
336.943 118 li
f
346.943 113 mo
346.943 118 li
348.943 118 li
348.943 113 li
f
350.943 126 mo
350.943 125 li
334.943 125 li
334.391 124.999 333.944 124.551 333.943 124 cv
333.943 119 li
333.944 118.447 334.39 118.001 334.943 118 cv
350.943 118 li
351.495 118.001 351.942 118.448 351.943 119 cv
351.943 124 li
351.942 124.551 351.494 124.999 350.943 125 cv
350.943 126 li
350.943 127 li
352.6 126.999 353.942 125.657 353.943 124 cv
353.943 119 li
353.942 117.342 352.6 116.001 350.943 116 cv
334.943 116 li
333.286 116 331.944 117.343 331.943 119 cv
331.943 124 li
331.944 125.656 333.285 126.999 334.943 127 cv
350.943 127 li
350.943 126 li
cp
f
328.943 93 mo
328.944 91.6159 329.501 90.3723 330.408 89.4643 cv
331.315 88.558 332.559 88.0005 333.943 88 cv
333.943 86 li
330.077 86.0006 326.944 89.1334 326.943 93 cv
328.943 93 li
cp
f
324.943 93 mo
324.944 90.5114 325.949 88.2678 327.579 86.636 cv
329.211 85.0058 331.455 84.0005 333.943 84 cv
333.943 82 li
327.867 82.0006 322.944 86.9243 322.943 93 cv
324.943 93 li
cp
f
358.943 93 mo
358.942 89.1332 355.809 86.0007 351.943 86 cv
351.943 88 li
353.327 88.0005 354.57 88.558 355.478 89.4644 cv
356.385 90.3724 356.943 91.616 356.943 93 cv
358.943 93 li
cp
f
362.943 93 mo
362.942 86.9242 358.018 82.0007 351.943 82 cv
351.943 84 li
354.431 84.0005 356.675 85.0058 358.307 86.636 cv
359.937 88.2678 360.943 90.5115 360.943 93 cv
362.943 93 li
cp
f
272.943 123 mo
272.943 119.958 li
272.944 119.441 272.805 118.945 272.574 118.52 cv
272.165 117.771 271.52 117.226 270.794 116.784 cv
269.698 116.126 268.371 115.689 267.06 115.393 cv
265.748 115.101 264.462 114.959 263.442 114.958 cv
261.892 114.962 259.709 115.281 257.788 115.986 cv
256.828 116.343 255.934 116.793 255.216 117.417 cv
254.858 117.73 254.544 118.092 254.313 118.52 cv
254.081 118.945 253.942 119.441 253.943 119.958 cv
253.943 123 li
255.943 123 li
255.943 119.958 li
255.945 119.786 255.982 119.64 256.073 119.469 cv
256.227 119.175 256.586 118.82 257.126 118.497 cv
257.93 118.007 259.094 117.604 260.262 117.345 cv
261.429 117.083 262.61 116.957 263.442 116.958 cv
264.714 116.954 266.781 117.257 268.404 117.862 cv
269.217 118.16 269.919 118.538 270.353 118.923 cv
270.572 119.114 270.723 119.301 270.814 119.47 cv
270.904 119.64 270.942 119.786 270.943 119.958 cv
270.943 123 li
272.943 123 li
cp
f
263.443 112.972 mo
263.443 113.972 li
264.737 113.976 265.892 113.489 266.693 112.675 cv
267.497 111.865 267.945 110.746 267.943 109.556 cv
267.943 108.416 li
267.945 107.226 267.497 106.107 266.693 105.297 cv
265.892 104.483 264.737 103.996 263.443 104 cv
262.149 103.996 260.994 104.483 260.193 105.297 cv
259.389 106.107 258.941 107.226 258.943 108.416 cv
258.943 109.556 li
258.941 110.745 259.389 111.864 260.193 112.675 cv
260.994 113.489 262.148 113.976 263.443 113.972 cv
263.443 112.972 li
263.443 111.972 li
262.633 111.968 262.037 111.691 261.614 111.268 cv
261.195 110.843 260.945 110.253 260.943 109.556 cv
260.943 108.416 li
260.945 107.718 261.195 107.129 261.614 106.704 cv
262.037 106.281 262.633 106.004 263.443 106 cv
264.253 106.004 264.849 106.281 265.272 106.704 cv
265.691 107.13 265.941 107.719 265.943 108.416 cv
265.943 109.556 li
265.941 110.253 265.691 110.842 265.272 111.268 cv
264.849 111.691 264.253 111.968 263.443 111.972 cv
263.443 112.972 li
cp
f
248.443 114.958 mo
248.443 113.958 li
247.632 113.954 247.037 113.677 246.614 113.255 cv
246.194 112.83 245.945 112.243 245.943 111.548 cv
245.943 110.41 li
245.945 109.715 246.194 109.128 246.614 108.703 cv
247.037 108.281 247.632 108.004 248.443 108 cv
249.253 108.004 249.849 108.281 250.272 108.703 cv
250.692 109.128 250.941 109.715 250.943 110.41 cv
250.943 111.548 li
250.941 112.243 250.692 112.83 250.272 113.255 cv
249.849 113.677 249.253 113.954 248.443 113.958 cv
248.443 114.958 li
248.443 115.958 li
249.737 115.962 250.891 115.476 251.692 114.663 cv
252.497 113.854 252.945 112.736 252.943 111.548 cv
252.943 110.41 li
252.945 109.222 252.497 108.104 251.692 107.295 cv
250.891 106.482 249.737 105.996 248.443 106 cv
247.149 105.996 245.995 106.482 245.194 107.295 cv
244.389 108.104 243.941 109.222 243.943 110.41 cv
243.943 111.548 li
243.941 112.736 244.389 113.854 245.194 114.663 cv
245.995 115.476 247.149 115.962 248.443 115.958 cv
248.443 114.958 li
cp
f
278.443 114.958 mo
278.443 115.958 li
279.737 115.962 280.891 115.476 281.692 114.663 cv
282.497 113.854 282.945 112.736 282.943 111.548 cv
282.943 110.41 li
282.945 109.222 282.497 108.104 281.692 107.295 cv
280.891 106.482 279.737 105.996 278.443 106 cv
277.149 105.996 275.995 106.482 275.194 107.295 cv
274.389 108.104 273.941 109.222 273.943 110.41 cv
273.943 111.548 li
273.941 112.736 274.389 113.854 275.194 114.663 cv
275.995 115.476 277.149 115.962 278.443 115.958 cv
278.443 114.958 li
278.443 113.958 li
277.632 113.954 277.037 113.677 276.614 113.255 cv
276.194 112.83 275.945 112.243 275.943 111.548 cv
275.943 110.41 li
275.945 109.715 276.194 109.128 276.614 108.703 cv
277.037 108.281 277.632 108.004 278.443 108 cv
279.253 108.004 279.849 108.281 280.272 108.703 cv
280.692 109.128 280.941 109.715 280.943 110.41 cv
280.943 111.548 li
280.941 112.243 280.692 112.83 280.272 113.255 cv
279.849 113.677 279.253 113.954 278.443 113.958 cv
278.443 114.958 li
cp
f
285.943 128 mo
285.943 120.958 li
285.944 119.857 285.488 118.856 284.762 118.146 cv
284.038 117.435 283.035 117 281.943 117 cv
278.529 117 li
273.529 122 li
267.049 122 li
266.949 122.889 li
266.946 122.918 266.924 123.123 266.924 123.44 cv
266.93 124.05 266.989 125.077 267.529 126.087 cv
267.799 126.589 268.211 127.085 268.794 127.442 cv
269.375 127.801 270.107 128.002 270.943 128 cv
272.952 128 276.943 128 276.943 128 cv
277.359 128 li
281.652 123.684 li
280.234 122.274 li
276.234 126.295 li
276.943 127 li
276.943 126 li
276.943 126 272.952 126 270.943 126 cv
270.41 125.998 270.081 125.884 269.84 125.738 cv
269.486 125.521 269.258 125.167 269.109 124.714 cv
268.961 124.268 268.923 123.762 268.924 123.44 cv
268.924 123.329 268.928 123.239 268.932 123.181 cv
268.936 123.119 li
268.937 123.108 li
268.637 123.078 li
268.937 123.111 li
268.937 123.108 li
268.637 123.078 li
268.937 123.111 li
267.943 123 li
267.943 124 li
274.357 124 li
279.357 119 li
281.943 119 li
282.502 119 282.999 119.219 283.362 119.574 cv
283.723 119.931 283.942 120.409 283.943 120.958 cv
283.943 128 li
285.943 128 li
cp
f
242.943 128 mo
242.943 120.958 li
242.946 119.863 243.813 119.005 244.924 119 cv
247.51 119 li
252.51 124 li
258.924 124 li
258.924 123 li
257.93 123.111 li
258.23 123.077 li
257.93 123.107 li
257.93 123.111 li
258.23 123.077 li
257.93 123.107 li
257.931 123.117 257.943 123.244 257.943 123.439 cv
257.949 123.869 257.867 124.622 257.581 125.132 cv
257.439 125.391 257.267 125.589 257.027 125.738 cv
256.786 125.884 256.457 125.998 255.924 126 cv
253.914 126 249.93 126 249.924 126 cv
249.924 127 li
250.634 126.296 li
246.643 122.274 li
245.223 123.683 li
249.508 128 li
249.924 128 li
249.924 128 253.914 128 255.924 128 cv
256.76 128.002 257.493 127.801 258.074 127.442 cv
258.954 126.901 259.423 126.069 259.66 125.332 cv
259.901 124.587 259.942 123.897 259.943 123.439 cv
259.943 123.123 259.921 122.918 259.918 122.889 cv
259.819 122 li
253.338 122 li
248.338 117 li
244.924 117 li
243.833 116.999 242.831 117.436 242.112 118.149 cv
241.39 118.861 240.942 119.861 240.943 120.958 cv
240.943 128 li
242.943 128 li
cp
f
255.943 128 mo
270.943 128 li
270.943 126 li
255.943 126 li
f
257.143 89.6 mo
263.762 98.4254 li
269.568 93.7809 li
268.318 92.2191 li
264.124 95.5746 li
258.743 88.4 li
257.143 89.6 li
cp
f
257.244 106.143 mo
253.467 103.866 250.943 99.7308 250.943 95 cv
250.944 91.4069 252.397 88.1633 254.751 85.8076 cv
257.106 83.4535 260.35 82.0005 263.943 82 cv
267.536 82.0005 270.78 83.4535 273.136 85.8076 cv
275.49 88.1633 276.943 91.4069 276.943 95 cv
276.944 100.177 273.918 104.644 269.538 106.738 cv
270.4 108.542 li
275.452 106.13 278.942 100.971 278.943 95 cv
278.943 86.7153 272.228 80.0006 263.943 80 cv
255.659 80.0006 248.944 86.7153 248.943 95 cv
248.943 100.455 251.857 105.234 256.212 107.857 cv
257.244 106.143 li
cp
f
105.943 128 mo
105.943 124.961 li
105.947 123.852 105.458 122.876 104.77 122.131 cv
103.732 121.007 102.26 120.268 100.753 119.759 cv
99.2412 119.256 97.6952 119.002 96.4459 119 cv
96.4176 119 li
96.4432 120 li
96.4432 119 li
94.7806 119.006 92.5762 119.447 90.6539 120.35 cv
89.6957 120.805 88.8071 121.379 88.1166 122.131 cv
87.429 122.875 86.9398 123.851 86.9432 124.961 cv
86.9432 128 li
88.9432 128 li
88.9432 124.961 li
88.9465 124.435 89.1495 123.973 89.5927 123.48 cv
90.2506 122.749 91.4612 122.086 92.7681 121.656 cv
94.0704 121.219 95.4703 120.998 96.4432 121 cv
96.456 121 li
96.4688 121 li
96.4447 120.058 li
96.4466 121 li
96.4688 121 li
96.4447 120.058 li
96.4466 121 li
96.4459 120.655 li
96.4459 121 li
96.4466 121 li
96.4459 120.655 li
96.4459 121 li
97.7461 120.994 99.7909 121.398 101.377 122.157 cv
102.173 122.533 102.854 122.996 103.294 123.48 cv
103.737 123.973 103.94 124.435 103.943 124.961 cv
103.943 128 li
105.943 128 li
cp
f
96.4432 106 mo
96.4432 105 li
94.8966 104.999 93.501 105.708 92.5218 106.8 cv
91.5389 107.893 90.9438 109.378 90.9432 111 cv
90.9432 112 li
90.9438 113.622 91.5389 115.107 92.5218 116.2 cv
93.501 117.292 94.8966 118.001 96.4432 118 cv
97.9897 118.001 99.3854 117.292 100.365 116.2 cv
101.347 115.107 101.943 113.622 101.943 112 cv
101.943 111 li
101.943 109.378 101.347 107.893 100.365 106.8 cv
99.3854 105.708 97.9897 104.999 96.4432 105 cv
96.4432 106 li
96.4432 107 li
97.3717 107.001 98.226 107.417 98.878 108.138 cv
99.5264 108.857 99.9438 109.872 99.9432 111 cv
99.9432 112 li
99.9438 113.128 99.5264 114.143 98.878 114.862 cv
98.226 115.583 97.3717 115.999 96.4432 116 cv
95.5147 115.999 94.6604 115.583 94.0084 114.862 cv
93.36 114.143 92.9426 113.128 92.9432 112 cv
92.9432 111 li
92.9426 109.872 93.36 108.857 94.0084 108.138 cv
94.6604 107.417 95.5147 107.001 96.4432 107 cv
96.4432 106 li
cp
f
89.9432 109 mo
88.9432 109 li
87.8392 108.998 86.9452 108.103 86.9432 107 cv
86.9432 84 li
86.9434 83.4507 87.1659 82.9554 87.5315 82.5883 cv
87.8986 82.2227 88.3939 82.0003 88.9432 82 cv
120.943 82 li
122.046 82.002 122.941 82.896 122.943 84 cv
122.943 107 li
122.941 108.103 122.046 108.998 120.943 109 cv
115.198 109 li
107.832 117.06 li
108.57 117.735 li
107.943 116.956 li
107.923 116.967 li
107.918 116.966 li
107.906 116.998 li
107.932 116.98 li
107.918 116.966 li
107.906 116.998 li
107.932 116.98 li
107.872 117.023 li
107.942 117 li
107.932 116.98 li
107.872 117.023 li
107.942 117 li
107.943 117 li
107.943 109 li
102.943 109 li
102.943 111 li
105.943 111 li
105.943 117 li
105.939 117.565 106.188 118.094 106.562 118.435 cv
106.935 118.781 107.418 118.966 107.923 118.967 cv
108.361 118.969 108.822 118.818 109.197 118.514 cv
109.257 118.466 li
116.08 111 li
120.943 111 li
123.152 110.999 124.942 109.209 124.943 107 cv
124.943 84 li
124.942 81.7899 123.152 80.0008 120.943 80 cv
88.9432 80 li
86.7365 80.0038 84.947 81.7933 84.9432 84 cv
84.9432 107 li
84.944 109.209 86.7331 110.999 88.9432 111 cv
89.9432 111 li
89.9432 109 li
cp
f
111.943 96 mo
110.943 96 li
110.943 97.66 110.273 99.1537 109.186 100.243 cv
108.097 101.33 106.603 101.999 104.943 102 cv
103.283 101.999 101.789 101.33 100.701 100.243 cv
99.6132 99.1537 98.9437 97.66 98.9432 96 cv
98.9437 94.34 99.6132 92.8463 100.701 91.7573 cv
101.789 90.67 103.283 90.0005 104.943 90 cv
106.603 90.0005 108.097 90.67 109.186 91.7573 cv
110.273 92.8463 110.943 94.34 110.943 96 cv
111.943 96 li
112.943 96 li
112.943 91.5813 109.362 88.0006 104.943 88 cv
100.525 88.0006 96.9438 91.5813 96.9432 96 cv
96.9438 100.419 100.525 103.999 104.943 104 cv
109.362 103.999 112.943 100.419 112.943 96 cv
111.943 96 li
cp
f
105.943 89 mo
105.943 86 li
103.943 86 li
103.943 89 li
f
102.943 87 mo
106.943 87 li
106.943 85 li
102.943 85 li
f
100.65 90.2929 mo
98.6503 88.2929 li
97.2361 89.7071 li
99.2361 91.7071 li
f
110.65 91.7071 mo
112.65 89.7071 li
111.236 88.2929 li
109.236 90.2929 li
f
103.943 91 mo
103.943 97 li
105.943 97 li
105.943 91 li
f
23.9432 83 mo
12.3445 83.0006 2.94381 92.4013 2.94319 104 cv
1.94319 104 li
-2.86102e-006 104 li
7.03688 113.852 li
12.6663 104 li
9.94319 104 li
9.9437 100.321 11.3577 96.9823 13.6754 94.482 cv
12.209 93.1219 li
9.56269 95.9736 7.94268 99.8028 7.94319 104 cv
7.94319 105 li
7.94319 106 li
9.22001 106 li
6.84951 110.148 li
3.88638 106 li
3.94319 106 li
4.94319 106 li
4.94319 104 li
4.94369 98.7499 7.0682 94.0063 10.508 90.5648 cv
13.9495 87.125 18.6931 85.0005 23.9432 85 cv
23.9432 83 li
cp
f
33.5179 87.5849 mo
34.1788 87.9719 34.8145 88.3967 35.42 88.8571 cv
36.6304 87.2649 li
35.9599 86.7552 35.2576 86.286 34.5285 85.8591 cv
33.5179 87.5849 li
cp
f
29.7434 85.9014 mo
30.3633 86.0998 30.9704 86.3297 31.5615 86.5882 cv
32.3629 84.7558 li
31.71 84.4702 31.0391 84.2161 30.353 83.9966 cv
29.7434 85.9014 li
cp
f
25.8862 85.0979 mo
26.4861 85.1587 27.0759 85.247 27.6572 85.362 cv
28.0452 83.4 li
27.4025 83.2729 26.7503 83.1753 26.0881 83.1081 cv
25.8862 85.0979 li
cp
f
24.0252 125 mo
29.8212 125.001 35.0591 122.647 38.8356 118.847 cv
42.6138 115.049 44.9437 109.793 44.9432 104 cv
44.9432 103 li
43.9432 103 li
43.9432 104 li
47.8864 104 li
40.8495 94.1484 li
35.22 104 li
37.9432 104 li
37.9432 104 li
37.9428 109.271 35.1149 113.845 30.8817 116.236 cv
31.8647 117.978 li
36.7174 115.24 39.9435 109.997 39.9432 104 cv
39.9432 103 li
39.9432 102 li
38.6664 102 li
41.0369 97.8516 li
44 102 li
43.9432 102 li
42.9432 102 li
42.9432 104 li
42.9416 114.499 34.5162 123 24.0252 123 cv
24.0252 125 li
cp
f
14.4496 120.414 mo
13.7899 120.028 13.1544 119.603 12.5484 119.142 cv
11.338 120.734 li
12.008 121.243 12.7105 121.714 13.4408 122.14 cv
14.4496 120.414 li
cp
f
18.2264 122.099 mo
17.6046 121.899 16.9976 121.67 16.4081 121.411 cv
15.6043 123.243 li
16.2588 123.53 16.9298 123.783 17.614 124.003 cv
18.2264 122.099 li
cp
f
22.0821 122.901 mo
21.4824 122.84 20.8925 122.752 20.3111 122.637 cv
19.9233 124.599 li
20.5658 124.726 21.218 124.824 21.8802 124.891 cv
22.0821 122.901 li
cp
f
32.9432 105 mo
31.9432 105 li
31.9427 107.212 31.0492 109.206 29.5998 110.657 cv
28.1489 112.106 26.1551 112.999 23.9432 113 cv
21.7307 112.999 19.737 112.106 18.2862 110.657 cv
16.837 109.206 15.9437 107.212 15.9432 105 cv
15.9437 102.787 16.837 100.794 18.2862 99.343 cv
19.737 97.8938 21.7306 97.0005 23.9432 97 cv
26.1552 97.0005 28.1489 97.8938 29.5999 99.343 cv
31.0492 100.794 31.9427 102.787 31.9432 105 cv
32.9432 105 li
33.9432 105 li
33.9425 99.4762 29.4658 95.0006 23.9432 95 cv
18.4196 95.0006 13.9438 99.4764 13.9432 105 cv
13.9438 110.523 18.4195 114.999 23.9432 115 cv
29.466 114.999 33.9424 110.523 33.9432 105 cv
32.9432 105 li
cp
f
24.9432 96 mo
24.9432 93 li
22.9432 93 li
22.9432 96 li
f
20.9432 94 mo
26.9432 94 li
26.9432 92 li
20.9432 92 li
f
18.6503 97.2929 mo
16.6503 95.2929 li
15.2361 96.7071 li
17.2361 98.7071 li
f
30.6503 98.7071 mo
32.6503 96.7071 li
31.2361 95.2929 li
29.2361 97.2929 li
f
22.9432 99 mo
22.9432 105 li
24.9432 105 li
24.9432 99 li
f
10.9432 200 mo
17.9432 200 li
17.9432 198 li
10.9432 198 li
f
16.9432 170 mo
42.9432 170 li
44.0465 170.002 44.9412 170.896 44.9432 172 cv
44.9432 205 li
20.9432 205 li
20.9432 172 li
20.9424 169.79 19.1519 168.001 16.9432 168 cv
14.7336 168.001 12.9438 169.79 12.9432 172 cv
12.9432 196 li
12.9412 197.103 12.046 197.998 10.9432 198 cv
9.83925 197.998 8.94519 197.103 8.94319 196 cv
8.94319 165 li
8.94235 162.79 7.1519 161.001 4.94319 161 cv
2.73362 161.001 .943764 162.79 .943189 165 cv
.943189 171 li
5.94319 171 li
5.94319 169 li
2.94319 169 li
2.94319 165 li
2.94519 163.896 3.83876 163.002 4.94319 163 cv
6.04649 163.002 6.94119 163.896 6.94319 165 cv
6.94319 196 li
6.94398 198.209 8.73313 199.999 10.9432 200 cv
13.1524 199.999 14.9421 198.209 14.9432 196 cv
14.9432 172 li
14.9452 170.896 15.8388 170.002 16.9432 170 cv
18.0465 170.002 18.9412 170.896 18.9432 172 cv
18.9432 207 li
46.9432 207 li
46.9432 172 li
46.9423 169.79 45.1519 168.001 42.9432 168 cv
16.9432 168 li
16.9432 170 li
cp
f
5.94319 163 mo
29.9432 163 li
31.0465 163.002 31.9412 163.896 31.9432 165 cv
31.9432 167 li
33.9432 167 li
33.9432 165 li
33.9423 162.79 32.1519 161.001 29.9432 161 cv
5.94319 161 li
5.94319 163 li
cp
f
40.9432 189 mo
39.9432 189 li
39.9427 190.936 39.1612 192.68 37.8928 193.95 cv
36.6229 195.218 34.8792 195.999 32.9432 196 cv
31.0066 195.999 29.263 195.218 27.9932 193.95 cv
26.725 192.68 25.9437 190.936 25.9432 189 cv
25.9437 187.063 26.725 185.32 27.9932 184.05 cv
29.2629 182.782 31.0065 182.001 32.9432 182 cv
34.8793 182 36.6229 182.782 37.8929 184.05 cv
39.1612 185.32 39.9427 187.063 39.9432 189 cv
40.9432 189 li
41.9432 189 li
41.9426 184.028 37.9137 180.001 32.9432 180 cv
27.9717 180.001 23.9437 184.028 23.9432 189 cv
23.9438 193.971 27.9715 197.999 32.9432 198 cv
37.9139 197.999 41.9425 193.971 41.9432 189 cv
40.9432 189 li
cp
f
33.9432 181 mo
33.9432 178 li
31.9432 178 li
31.9432 181 li
f
29.9432 179 mo
35.9432 179 li
35.9432 177 li
29.9432 177 li
f
27.6503 182.293 mo
25.6503 180.293 li
24.2361 181.707 li
26.2361 183.707 li
f
39.6503 183.707 mo
41.6503 181.707 li
40.2361 180.293 li
38.2361 182.293 li
f
31.9432 183 mo
31.9432 189 li
33.9432 189 li
33.9432 183 li
f
105.436 190.558 mo
106.462 187.738 li
104.582 187.054 li
103.556 189.874 li
f
104.236 175.707 mo
108.943 180.414 li
116.65 172.707 li
115.236 171.293 li
108.943 177.586 li
105.65 174.293 li
104.236 175.707 li
cp
f
94.9432 179 mo
97.9432 179 li
97.9432 177 li
94.9432 177 li
f
119.943 179 mo
122.943 179 li
122.943 177 li
119.943 177 li
f
107.943 164 mo
107.943 167 li
109.943 167 li
109.943 164 li
f
97.9334 202.707 mo
98.1885 202.443 98.3211 202.282 98.4707 202.185 cv
98.6188 202.092 98.7785 202.006 99.2262 202 cv
100.45 202 112.718 202 113.943 202 cv
114.241 201.994 114.423 201.922 114.599 201.851 cv
114.92 201.712 115.212 201.523 115.547 201.287 cv
116.695 200.465 118.279 199.019 119.699 197.662 cv
120.406 196.985 121.065 196.334 121.59 195.806 cv
122.118 195.274 122.5 194.878 122.689 194.666 cv
122.69 194.665 li
122.822 194.516 122.963 194.335 123.137 194.1 cv
123.74 193.289 124.693 191.879 125.614 190.411 cv
126.536 188.939 127.408 187.448 127.863 186.393 cv
128.003 186.065 127.959 185.691 127.746 185.404 cv
127.379 184.916 126.866 184.551 126.252 184.284 cv
125.637 184.02 124.914 183.863 124.121 183.862 cv
123.671 183.862 123.2 183.913 122.716 184.026 cv
122.717 184.026 li
121.651 184.267 120.739 184.816 120.004 185.593 cv
119.265 186.369 118.671 187.346 118.054 188.543 cv
118.943 189 li
118.482 188.112 li
113.897 190.492 li
114.819 192.268 li
119.404 189.888 li
119.59 189.791 119.737 189.643 119.833 189.457 cv
120.408 188.334 120.929 187.516 121.45 186.975 cv
121.976 186.433 122.467 186.143 123.169 185.974 cv
123.17 185.974 li
123.504 185.896 123.823 185.862 124.121 185.862 cv
124.646 185.862 125.108 185.969 125.462 186.122 cv
125.816 186.271 126.055 186.476 126.14 186.596 cv
126.943 186 li
126.024 185.607 li
125.823 186.078 125.454 186.777 125.011 187.543 cv
124.346 188.695 123.511 190.015 122.778 191.115 cv
122.411 191.666 122.07 192.162 121.789 192.554 cv
121.513 192.942 121.282 193.24 121.197 193.335 cv
121.197 193.334 li
121.037 193.514 120.505 194.066 119.815 194.753 cv
118.777 195.788 117.349 197.164 116.097 198.264 cv
115.473 198.813 114.889 199.295 114.441 199.619 cv
114.219 199.78 114.028 199.902 113.907 199.966 cv
113.798 200.018 li
113.865 200.206 li
113.824 200.011 li
113.798 200.018 li
113.865 200.206 li
113.824 200.011 li
113.943 200.579 li
113.943 200 li
113.824 200.011 li
113.943 200.579 li
113.943 200 li
112.718 200 100.45 200 99.2262 200 cv
98.4498 199.994 97.8011 200.216 97.3509 200.528 cv
96.9023 200.835 96.6468 201.174 96.519 201.293 cv
97.9334 202.707 li
cp
f
102.943 196 mo
102.943 196 110.943 196 111.943 196 cv
113.149 196.004 114.174 195.611 114.877 194.948 cv
115.582 194.289 115.945 193.39 115.943 192.5 cv
115.945 191.61 115.582 190.711 114.877 190.052 cv
114.174 189.389 113.149 188.996 111.943 189 cv
110.943 189 108.723 189 105.943 189 cv
105.943 189.33 li
106.025 189.008 li
105.943 189 li
105.943 189.33 li
106.025 189.008 li
106.024 189.008 li
105.989 189.001 105.781 188.888 105.541 188.71 cv
105.172 188.444 104.701 188.051 104.169 187.701 cv
103.634 187.361 103.027 187.013 102.226 187 cv
101.639 187 98.5772 187 97.2262 187 cv
96.2802 187.007 95.4046 187.353 94.6047 187.783 cv
93.8068 188.219 93.0923 188.759 92.5444 189.268 cv
92.5193 189.293 li
91.7801 190.031 90.7467 191.03 89.9012 191.84 cv
89.0553 192.65 88.3982 193.272 88.3967 193.274 cv
89.7717 194.726 li
89.775 194.723 92.416 192.223 93.9331 190.707 cv
93.2262 190 li
93.908 190.732 li
94.33 190.337 94.94 189.877 95.562 189.539 cv
96.1818 189.195 96.8212 188.993 97.2262 189 cv
98.5772 189 101.639 189 102.226 189 cv
102.3 188.996 102.505 189.044 102.77 189.191 cv
103.17 189.405 103.662 189.797 104.147 190.166 cv
104.393 190.35 104.638 190.53 104.91 190.685 cv
105.184 190.833 105.484 190.99 105.943 191 cv
108.723 191 110.943 191 111.943 191 cv
112.738 191.004 113.213 191.236 113.509 191.511 cv
113.804 191.789 113.942 192.14 113.943 192.5 cv
113.942 192.86 113.804 193.211 113.509 193.489 cv
113.213 193.764 112.738 193.996 111.943 194 cv
111.443 194 109.193 194 107.068 194 cv
104.943 194 102.947 194 102.943 194 cv
102.943 196 li
cp
f
94.2262 207 mo
94.9333 207.707 li
98.9333 203.707 li
99.1195 203.521 99.2262 203.263 99.2262 203 cv
99.2262 202.737 99.1195 202.479 98.9333 202.293 cv
87.9333 191.293 li
87.5428 190.902 86.9096 190.902 86.5191 191.293 cv
82.5191 195.293 li
82.1286 195.683 82.1286 196.317 82.5191 196.707 cv
93.5191 207.707 li
93.7053 207.893 93.9629 208 94.2262 208 cv
94.4895 208 94.7471 207.893 94.9333 207.707 cv
94.2262 207 li
94.9333 206.293 li
84.6404 196 li
87.2262 193.414 li
96.812 203 li
93.5191 206.293 li
94.2262 207 li
94.9333 206.293 li
94.2262 207 li
cp
f
95.5701 184.803 mo
94.5299 182.761 93.9434 180.452 93.9432 178 cv
93.9437 173.854 95.6205 170.111 98.3364 167.393 cv
101.054 164.677 104.798 163 108.943 163 cv
113.088 163 116.832 164.677 119.55 167.393 cv
122.266 170.111 123.943 173.854 123.943 178 cv
123.943 179.355 123.763 180.667 123.427 181.916 cv
125.358 182.436 li
125.739 181.021 125.943 179.533 125.943 178 cv
125.943 168.61 118.332 161.001 108.943 161 cv
99.5536 161.001 91.9438 168.61 91.9432 178 cv
91.943 180.772 92.6085 183.397 93.7882 185.711 cv
95.5702 184.803 li
cp
f
189.943 177 mo
190.943 177 li
190.943 172.963 li
190.943 172.474 190.587 172.055 190.104 171.976 cv
187.146 171.494 li
186.985 172.481 li
187.96 172.259 li
187.648 170.884 187.105 169.598 186.376 168.441 cv
185.53 168.974 li
186.342 169.558 li
188.094 167.124 li
188.379 166.727 188.335 166.179 187.989 165.833 cv
185.109 162.953 li
184.764 162.607 184.215 162.563 183.818 162.849 cv
181.384 164.602 li
181.968 165.413 li
182.501 164.567 li
181.345 163.838 180.059 163.294 178.683 162.982 cv
178.461 163.957 li
179.448 163.796 li
178.966 160.839 li
178.887 160.357 178.468 160 177.979 160 cv
173.906 160 li
173.417 160 172.998 160.356 172.919 160.839 cv
172.437 163.796 li
173.424 163.957 li
173.203 162.982 li
171.826 163.294 170.541 163.838 169.384 164.567 cv
169.917 165.413 li
170.502 164.602 li
168.068 162.849 li
167.671 162.563 167.122 162.607 166.776 162.953 cv
163.896 165.833 li
163.55 166.179 163.506 166.727 163.791 167.124 cv
165.543 169.559 li
166.355 168.975 li
165.509 168.442 li
164.78 169.598 164.238 170.884 163.925 172.259 cv
164.9 172.481 li
164.739 171.494 li
161.782 171.977 li
161.299 172.056 160.943 172.475 160.943 172.964 cv
160.943 177.037 li
160.943 177.526 161.3 177.945 161.782 178.024 cv
164.739 178.506 li
164.9 177.519 li
163.925 177.741 li
164.238 179.116 164.782 180.401 165.51 181.558 cv
166.356 181.025 li
165.545 180.441 li
163.792 182.875 li
163.506 183.271 163.55 183.82 163.896 184.166 cv
166.776 187.046 li
167.122 187.392 167.671 187.436 168.067 187.151 cv
170.501 185.399 li
169.917 184.587 li
169.384 185.433 li
170.541 186.162 171.827 186.705 173.203 187.017 cv
173.424 186.042 li
172.437 186.203 li
172.919 189.161 li
172.998 189.643 173.417 190 173.906 190 cv
177.979 190 li
178.468 190 178.888 189.643 178.966 189.161 cv
179.448 186.203 li
178.461 186.042 li
178.683 187.017 li
180.058 186.705 181.344 186.162 182.501 185.433 cv
181.968 184.587 li
181.384 185.399 li
183.818 187.151 li
184.215 187.436 184.764 187.392 185.109 187.046 cv
187.989 184.166 li
188.335 183.82 188.379 183.271 188.094 182.875 cv
186.341 180.441 li
185.529 181.025 li
186.375 181.558 li
187.104 180.401 187.648 179.116 187.96 177.74 cv
186.985 177.518 li
187.158 178.503 li
190.116 177.985 li
190.594 177.901 190.943 177.486 190.943 177 cv
189.943 177 li
189.771 176.015 li
186.813 176.533 li
186.414 176.603 186.1 176.902 186.01 177.296 cv
185.749 178.446 185.295 179.521 184.683 180.492 cv
184.466 180.837 184.48 181.279 184.718 181.609 cv
185.974 183.353 li
184.296 185.031 li
182.552 183.775 li
182.222 183.537 181.78 183.524 181.435 183.741 cv
180.464 184.352 179.39 184.805 178.24 185.067 cv
177.842 185.157 177.54 185.479 177.474 185.881 cv
177.129 188 li
174.756 188 li
174.411 185.881 li
174.346 185.479 174.043 185.157 173.646 185.067 cv
172.495 184.805 171.421 184.352 170.45 183.741 cv
170.105 183.524 169.664 183.537 169.333 183.775 cv
167.589 185.031 li
165.912 183.353 li
167.168 181.609 li
167.406 181.279 167.42 180.837 167.202 180.492 cv
166.591 179.521 166.137 178.446 165.875 177.297 cv
165.785 176.9 165.463 176.598 165.061 176.532 cv
162.943 176.187 li
162.943 173.814 li
165.061 173.468 li
165.464 173.402 165.785 173.1 165.875 172.703 cv
166.137 171.552 166.59 170.478 167.201 169.508 cv
167.418 169.163 167.405 168.722 167.167 168.391 cv
165.911 166.646 li
167.589 164.968 li
169.333 166.224 li
169.663 166.463 170.105 166.476 170.45 166.259 cv
171.422 165.648 172.496 165.193 173.646 164.932 cv
174.043 164.842 174.346 164.52 174.411 164.118 cv
174.756 162 li
177.129 162 li
177.474 164.118 li
177.54 164.52 177.842 164.842 178.24 164.932 cv
179.389 165.193 180.464 165.648 181.435 166.259 cv
181.78 166.476 182.222 166.463 182.553 166.224 cv
184.296 164.968 li
185.974 166.646 li
184.719 168.39 li
184.48 168.721 184.467 169.162 184.684 169.507 cv
185.295 170.478 185.749 171.552 186.01 172.703 cv
186.1 173.1 186.422 173.402 186.824 173.468 cv
188.943 173.813 li
188.943 177 li
189.943 177 li
189.771 176.015 li
189.943 177 li
cp
f
192.942 195 mo
191.942 195 li
191.943 197.209 193.733 198.999 195.942 199 cv
198.152 198.999 199.942 197.209 199.943 195 cv
199.942 192.79 198.152 191.001 195.942 191 cv
193.733 191.001 191.943 192.79 191.942 195 cv
192.942 195 li
193.942 195 li
193.944 193.896 194.839 193.002 195.942 193 cv
197.047 193.002 197.941 193.896 197.943 195 cv
197.941 196.103 197.046 196.998 195.942 197 cv
194.839 196.998 193.944 196.103 193.942 195 cv
192.942 195 li
cp
f
207.771 192.326 mo
208.705 191.967 li
207.453 188.708 li
207.274 188.243 206.782 187.981 206.297 188.092 cv
203.668 188.692 li
203.89 189.667 li
204.721 189.11 li
204.048 188.105 203.217 187.243 202.278 186.541 cv
201.679 187.342 li
202.641 187.615 li
203.378 185.019 li
203.514 184.54 203.278 184.035 202.823 183.832 cv
199.633 182.412 li
199.178 182.21 198.644 182.372 198.379 182.794 cv
196.943 185.079 li
197.79 185.611 li
197.984 184.63 li
197.313 184.497 196.626 184.428 195.932 184.428 cv
195.437 184.428 194.938 184.463 194.44 184.535 cv
194.582 185.525 li
195.455 185.038 li
194.142 182.685 li
193.9 182.25 193.376 182.06 192.911 182.238 cv
189.652 183.489 li
189.187 183.668 188.924 184.16 189.035 184.645 cv
189.634 187.273 li
190.609 187.051 li
190.052 186.22 li
189.046 186.895 188.185 187.726 187.483 188.664 cv
188.283 189.263 li
188.556 188.301 li
185.961 187.565 li
185.482 187.429 184.977 187.665 184.775 188.12 cv
183.356 191.309 li
183.153 191.764 183.315 192.297 183.737 192.563 cv
186.021 193.999 li
186.553 193.152 li
185.572 192.958 li
185.439 193.629 185.371 194.316 185.371 195.01 cv
185.371 195.505 185.406 196.004 185.477 196.502 cv
186.467 196.36 li
185.98 195.487 li
183.628 196.8 li
183.193 197.043 183.003 197.566 183.182 198.031 cv
184.433 201.29 li
184.611 201.755 185.103 202.018 185.589 201.907 cv
188.215 201.308 li
187.993 200.333 li
187.163 200.89 li
187.837 201.896 188.668 202.757 189.605 203.459 cv
190.204 202.658 li
189.242 202.386 li
188.507 204.982 li
188.371 205.461 188.608 205.965 189.063 206.168 cv
192.253 207.587 li
192.708 207.789 193.241 207.626 193.506 207.205 cv
194.94 204.921 li
194.093 204.389 li
193.899 205.37 li
194.571 205.503 195.258 205.572 195.952 205.572 cv
196.447 205.572 196.945 205.537 197.444 205.465 cv
197.301 204.475 li
196.428 204.963 li
197.743 207.315 li
197.986 207.75 198.51 207.939 198.975 207.761 cv
202.234 206.51 li
202.698 206.331 202.961 205.839 202.85 205.353 cv
202.25 202.725 li
201.275 202.948 li
201.832 203.779 li
202.837 203.105 203.699 202.275 204.401 201.337 cv
203.6 200.738 li
203.328 201.7 li
205.924 202.435 li
206.403 202.571 206.907 202.335 207.11 201.88 cv
208.53 198.691 li
208.732 198.236 208.57 197.702 208.148 197.437 cv
205.863 196.001 li
205.331 196.848 li
206.312 197.042 li
206.445 196.371 206.514 195.684 206.514 194.99 cv
206.514 194.495 206.479 193.997 206.407 193.498 cv
205.417 193.641 li
205.905 194.514 li
208.259 193.199 li
208.694 192.956 208.883 192.432 208.705 191.967 cv
207.771 192.326 li
207.283 191.453 li
204.929 192.768 li
204.568 192.97 204.368 193.374 204.427 193.784 cv
204.485 194.187 204.514 194.589 204.514 194.99 cv
204.514 195.551 204.458 196.108 204.35 196.654 cv
204.27 197.06 204.449 197.475 204.799 197.695 cv
206.35 198.669 li
205.635 200.275 li
203.873 199.776 li
203.475 199.663 203.047 199.808 202.8 200.139 cv
202.229 200.901 201.531 201.573 200.719 202.117 cv
200.375 202.347 200.208 202.767 200.3 203.171 cv
200.707 204.953 li
199.066 205.583 li
198.174 203.987 li
197.972 203.626 197.568 203.426 197.159 203.485 cv
196.755 203.543 196.352 203.572 195.952 203.572 cv
195.39 203.572 194.833 203.516 194.287 203.408 cv
193.881 203.328 193.466 203.507 193.246 203.857 cv
192.273 205.407 li
190.667 204.692 li
191.166 202.93 li
191.279 202.532 191.134 202.105 190.803 201.857 cv
190.041 201.287 189.369 200.59 188.824 199.776 cv
188.594 199.433 188.174 199.266 187.771 199.358 cv
185.989 199.764 li
185.359 198.124 li
186.955 197.233 li
187.316 197.032 187.516 196.627 187.457 196.218 cv
187.399 195.814 187.371 195.411 187.371 195.01 cv
187.371 194.448 187.426 193.892 187.534 193.346 cv
187.614 192.94 187.436 192.526 187.085 192.305 cv
185.535 191.331 li
186.249 189.726 li
188.01 190.225 li
188.408 190.338 188.836 190.193 189.084 189.862 cv
189.656 189.098 190.352 188.427 191.166 187.882 cv
191.51 187.651 191.676 187.232 191.584 186.829 cv
191.178 185.046 li
192.818 184.416 li
193.709 186.012 li
193.91 186.373 194.315 186.574 194.725 186.515 cv
195.128 186.457 195.531 186.428 195.932 186.428 cv
196.494 186.428 197.051 186.484 197.596 186.592 cv
198.002 186.672 198.417 186.493 198.637 186.143 cv
199.612 184.592 li
201.217 185.307 li
200.717 187.069 li
200.604 187.467 200.749 187.895 201.081 188.143 cv
201.844 188.713 202.515 189.411 203.059 190.224 cv
203.29 190.567 203.709 190.734 204.113 190.642 cv
205.897 190.235 li
206.838 192.685 li
207.771 192.326 li
207.283 191.453 li
207.771 192.326 li
cp
f
174.943 167 mo
174.943 175.566 li
180.429 178.857 li
181.458 177.143 li
176.943 174.434 li
176.943 167 li
174.943 167 li
cp
f
283.062 177.871 mo
282.354 177.165 li
268.344 191.22 li
268.221 191.344 268.135 191.492 268.088 191.66 cv
266.559 197.202 li
266.463 197.549 266.562 197.921 266.817 198.176 cv
267.072 198.43 267.444 198.528 267.791 198.431 cv
273.325 196.893 li
273.493 196.847 273.642 196.76 273.765 196.636 cv
287.775 182.581 li
288.143 182.214 288.295 181.72 288.291 181.285 cv
288.284 180.591 287.978 179.965 287.479 179.459 cv
285.476 177.457 li
285.477 177.457 li
284.971 176.959 284.346 176.653 283.653 176.646 cv
283.217 176.642 282.721 176.795 282.354 177.165 cv
283.062 177.871 li
283.77 178.577 li
283.586 178.393 li
283.678 178.638 li
283.77 178.577 li
283.586 178.393 li
283.678 178.638 li
283.628 178.507 li
283.652 178.645 li
283.678 178.638 li
283.628 178.507 li
283.652 178.645 li
283.653 178.646 li
283.684 178.638 283.892 178.693 284.061 178.87 cv
284.062 178.871 li
286.065 180.873 li
286.243 181.043 286.299 181.253 286.291 181.285 cv
286.292 181.286 li
286.514 181.324 li
286.359 181.169 li
286.292 181.286 li
286.514 181.324 li
286.359 181.169 li
272.535 195.037 li
268.957 196.032 li
269.946 192.446 li
283.77 178.577 li
283.062 177.871 li
cp
f
285.654 183.293 mo
281.65 179.288 li
280.236 180.702 li
284.24 184.707 li
f
275.943 196 mo
275.943 206 li
250.943 206 li
250.943 166 li
250.943 163.237 248.705 161 245.943 161 cv
243.181 161 240.944 163.238 240.943 166 cv
240.943 170 li
247.943 170 li
247.943 168 li
242.943 168 li
242.943 166 li
242.946 164.342 244.285 163.003 245.943 163 cv
247.6 163.003 248.94 164.343 248.943 166 cv
248.943 208 li
277.943 208 li
277.943 196 li
275.943 196 li
cp
f
245.943 163 mo
272.943 163 li
274.6 163.003 275.94 164.343 275.943 166 cv
275.943 181 li
277.943 181 li
277.943 166 li
277.943 163.237 275.705 161 272.943 161 cv
245.943 161 li
245.943 163 li
cp
f
263.943 171 mo
272.943 171 li
272.943 169 li
263.943 169 li
f
260.162 168.375 mo
257.017 172.307 li
255.775 170.445 li
254.111 171.555 li
256.111 174.555 li
256.287 174.819 256.583 174.985 256.9 174.999 cv
257.217 175.013 257.526 174.873 257.724 174.625 cv
261.724 169.625 li
260.162 168.375 li
cp
f
263.943 180 mo
272.943 180 li
272.943 178 li
263.943 178 li
f
263.943 175 mo
270.943 175 li
270.943 173 li
263.943 173 li
f
263.943 184 mo
269.943 184 li
269.943 182 li
263.943 182 li
f
260.162 177.375 mo
257.017 181.307 li
255.775 179.445 li
254.111 180.555 li
256.111 183.555 li
256.287 183.819 256.583 183.985 256.9 183.999 cv
257.217 184.013 257.526 183.873 257.724 183.625 cv
261.724 178.625 li
260.162 177.375 li
cp
f
260.162 186.375 mo
257.017 190.307 li
255.775 188.445 li
254.111 189.555 li
256.111 192.555 li
256.287 192.819 256.583 192.985 256.9 192.999 cv
257.217 193.013 257.526 192.873 257.724 192.625 cv
261.724 187.625 li
260.162 186.375 li
cp
f
352.943 185 mo
354.943 185 li
355.052 184.995 355.36 185.058 355.611 185.18 cv
355.87 185.295 356.071 185.477 356.1 185.537 cv
356.395 186 li
358.943 186 li
359.099 185.993 359.398 186.101 359.61 186.307 cv
359.828 186.514 359.945 186.761 359.943 187 cv
359.943 188 li
362.943 188 li
363.099 187.993 363.398 188.101 363.61 188.307 cv
363.828 188.514 363.945 188.761 363.943 189 cv
363.943 199 li
363.943 199.339 363.859 199.69 363.705 200.066 cv
363.476 200.632 363.088 201.229 362.717 201.847 cv
362.532 202.159 362.351 202.477 362.205 202.826 cv
362.061 203.173 361.945 203.559 361.943 204 cv
361.943 204.889 361.943 205.04 361.943 205.04 cv
361.943 205.303 362.05 205.561 362.236 205.747 cv
362.422 205.933 362.68 206.04 362.943 206.04 cv
363.206 206.04 363.464 205.933 363.65 205.747 cv
363.836 205.561 363.943 205.303 363.943 205.04 cv
363.943 205 li
361.943 205 li
361.943 205.04 li
361.943 205.303 362.05 205.561 362.236 205.747 cv
362.422 205.933 362.68 206.04 362.943 206.04 cv
363.206 206.04 363.464 205.933 363.65 205.747 cv
363.836 205.561 363.943 205.303 363.943 205.04 cv
363.943 205.04 363.943 204.889 363.943 204 cv
363.939 203.915 363.991 203.691 364.15 203.383 cv
364.379 202.918 364.803 202.307 365.191 201.589 cv
365.575 200.871 365.941 200.012 365.943 199 cv
365.943 189 li
365.942 188.114 365.527 187.361 364.979 186.849 cv
364.426 186.336 363.724 186.007 362.943 186 cv
360.943 186 li
360.943 187 li
361.943 187 li
361.942 186.114 361.527 185.361 360.979 184.849 cv
360.426 184.336 359.724 184.007 358.943 184 cv
356.943 184 li
356.943 185 li
357.786 184.463 li
357.432 183.922 356.948 183.604 356.459 183.369 cv
355.964 183.142 355.463 183.005 354.943 183 cv
352.943 183 li
352.943 185 li
cp
f
353.943 190 mo
353.943 177 li
353.942 175.342 352.6 174.001 350.943 174 cv
349.286 174 347.944 175.343 347.943 177 cv
347.943 191.573 li
347.789 191.72 li
345.818 188.666 li
345.802 188.643 li
345.394 188.079 344.908 187.659 344.388 187.389 cv
343.869 187.117 343.323 186.999 342.815 187 cv
342.086 187.002 341.436 187.227 340.924 187.581 cv
340.667 187.761 340.442 187.975 340.262 188.241 cv
340.084 188.505 339.945 188.837 339.943 189.231 cv
339.943 189.401 li
339.999 189.561 li
340 189.563 340.759 191.735 341.574 193.995 cv
341.981 195.126 342.402 196.279 342.751 197.198 cv
342.926 197.657 343.082 198.058 343.213 198.375 cv
343.278 198.534 343.337 198.671 343.391 198.79 cv
343.448 198.912 343.488 199.001 343.568 199.13 cv
343.814 199.511 344.142 199.881 344.52 200.297 cv
345.083 200.911 345.75 201.591 346.255 202.173 cv
346.507 202.462 346.717 202.728 346.841 202.918 cv
346.903 203.011 346.942 203.086 346.954 203.116 cv
346.956 203.116 li
347.412 203 li
346.943 203 li
346.956 203.116 li
347.412 203 li
346.943 203 li
346.943 203.855 346.943 205 346.943 205 cv
348.943 205 li
348.943 205 348.943 203.855 348.943 203 cv
348.935 202.617 348.82 202.376 348.707 202.147 cv
348.5 201.757 348.223 201.404 347.904 201.023 cv
347.426 200.459 346.85 199.863 346.342 199.32 cv
345.839 198.788 345.391 198.278 345.254 198.054 cv
345.255 198.053 li
345.213 197.973 345.106 197.728 344.98 197.411 cv
344.528 196.285 343.75 194.145 343.091 192.302 cv
342.761 191.38 342.46 190.529 342.241 189.909 cv
342.023 189.289 341.888 188.902 341.887 188.901 cv
340.943 189.231 li
341.943 189.231 li
341.605 189.231 li
341.926 189.343 li
341.943 189.231 li
341.605 189.231 li
341.926 189.343 li
341.786 189.294 li
341.92 189.359 li
341.926 189.343 li
341.786 189.294 li
341.92 189.359 li
341.918 189.359 li
341.92 189.359 li
341.92 189.359 li
341.918 189.359 li
341.92 189.359 li
341.927 189.34 342.032 189.225 342.2 189.143 cv
342.367 189.058 342.588 188.999 342.815 189 cv
343.023 189 343.237 189.044 343.463 189.162 cv
343.689 189.28 343.934 189.475 344.184 189.819 cv
344.993 189.231 li
344.153 189.773 li
347.423 194.841 li
349.943 192.427 li
349.943 177 li
349.944 176.447 350.39 176.001 350.943 176 cv
351.495 176.001 351.942 176.448 351.943 177 cv
351.943 190 li
353.943 190 li
cp
f
355.943 185 mo
355.943 190 li
357.943 190 li
357.943 185 li
f
359.943 187 mo
359.943 191 li
361.943 191 li
361.943 187 li
f
365.943 208 mo
365.943 204 li
344.943 204 li
344.943 208 li
346.943 208 li
346.943 206 li
363.943 206 li
363.943 208 li
365.943 208 li
cp
f
340.996 197.975 mo
331.497 197.483 323.942 189.623 323.943 180 cv
323.944 175.026 325.956 170.532 329.215 167.272 cv
332.475 164.013 336.969 162 341.943 162 cv
346.917 162 351.41 164.013 354.671 167.272 cv
357.93 170.532 359.943 175.026 359.943 180 cv
359.943 180.62 359.911 181.235 359.849 181.841 cv
361.839 182.043 li
361.907 181.371 361.943 180.69 361.943 180 cv
361.943 168.953 352.989 160.001 341.943 160 cv
330.897 160.001 321.944 168.953 321.943 180 cv
321.945 190.693 330.333 199.425 340.892 199.973 cv
340.996 197.975 li
cp
f
340.943 166 mo
340.943 179.42 li
334.447 183.132 li
335.439 184.868 li
342.943 180.58 li
342.943 166 li
340.943 166 li
cp
f
338.184 265.651 mo
344.733 273.292 li
350.458 269.857 li
349.429 268.142 li
345.153 270.708 li
339.702 264.349 li
338.184 265.651 li
cp
f
356.943 271 mo
355.943 271 li
355.943 274.04 354.713 276.784 352.721 278.778 cv
350.727 280.77 347.984 281.999 344.943 282 cv
341.902 281.999 339.158 280.77 337.165 278.778 cv
335.173 276.784 333.944 274.04 333.943 271 cv
333.944 267.959 335.173 265.215 337.165 263.222 cv
339.158 261.229 341.902 260 344.943 260 cv
347.984 260 350.727 261.229 352.721 263.222 cv
354.713 265.215 355.943 267.959 355.943 271 cv
356.943 271 li
357.943 271 li
357.943 263.819 352.123 258.001 344.943 258 cv
337.763 258.001 331.944 263.819 331.943 271 cv
331.944 278.18 337.762 283.999 344.943 284 cv
352.123 283.999 357.942 278.18 357.943 271 cv
356.943 271 li
cp
f
341.65 256.244 mo
340.146 254.743 338.147 253.999 336.162 253.999 cv
334.163 253.999 332.152 254.752 330.639 256.264 cv
329.131 257.772 328.382 259.78 328.383 261.773 cv
328.382 263.766 329.132 265.773 330.639 267.279 cv
332.053 265.864 li
330.943 264.757 330.383 263.272 330.383 261.773 cv
330.383 260.274 330.943 258.788 332.053 257.678 cv
333.168 256.563 334.66 256 336.162 255.999 cv
337.654 256 339.131 256.555 340.237 257.66 cv
341.65 256.244 li
cp
f
349.65 257.659 mo
350.755 256.555 352.231 256 353.723 255.999 cv
355.225 256 356.717 256.563 357.832 257.678 cv
358.943 258.788 359.502 260.274 359.503 261.773 cv
359.502 263.272 358.942 264.757 357.833 265.864 cv
359.246 267.28 li
360.754 265.773 361.504 263.767 361.503 261.773 cv
361.504 259.78 360.755 257.773 359.246 256.264 cv
357.734 254.752 355.722 253.999 353.723 253.999 cv
351.738 253.999 349.74 254.743 348.236 256.244 cv
349.65 257.659 li
cp
f
336.143 279.4 mo
333.143 283.4 li
334.743 284.6 li
337.743 280.6 li
f
352.143 280.6 mo
355.143 284.6 li
356.743 283.4 li
353.743 279.4 li
f
362.534 277.842 mo
364.075 276.722 364.946 275.135 364.943 273.499 cv
364.946 271.863 364.075 270.277 362.534 269.157 cv
361.352 270.771 li
362.478 271.604 362.939 272.576 362.943 273.499 cv
362.939 274.422 362.478 275.395 361.352 276.228 cv
362.534 277.842 li
cp
f
365.611 280.744 mo
367.814 278.771 368.946 276.136 368.943 273.5 cv
368.946 270.863 367.814 268.228 365.611 266.256 cv
364.275 267.744 li
366.073 269.36 366.941 271.431 366.943 273.5 cv
366.941 275.568 366.073 277.639 364.275 279.256 cv
365.611 280.744 li
cp
f
328.534 276.228 mo
327.408 275.395 326.947 274.422 326.943 273.499 cv
326.947 272.577 327.408 271.604 328.534 270.771 cv
327.352 269.157 li
325.811 270.277 324.939 271.863 324.943 273.499 cv
324.939 275.136 325.811 276.722 327.352 277.842 cv
328.534 276.228 li
cp
f
325.611 279.256 mo
323.814 277.639 322.946 275.568 322.943 273.5 cv
322.946 271.431 323.814 269.36 325.611 267.744 cv
324.275 266.256 li
322.073 268.228 320.941 270.863 320.943 273.5 cv
320.941 276.136 322.072 278.771 324.275 280.744 cv
325.611 279.256 li
cp
f
349.111 243.445 mo
344.324 250.626 li
347.987 251.542 li
345.236 254.293 li
346.65 255.707 li
351.899 250.458 li
347.562 249.374 li
350.775 244.555 li
349.111 243.445 li
cp
f
356.236 244.293 mo
352.092 248.437 li
355.092 249.437 li
354.236 250.293 li
355.65 251.707 li
358.794 248.563 li
355.794 247.563 li
357.65 245.707 li
356.236 244.293 li
cp
f
271.943 248 mo
271.943 260.535 li
278.388 264.832 li
279.498 263.168 li
273.943 259.465 li
273.943 248 li
271.943 248 li
cp
f
249.943 266.999 mo
249.943 265.999 li
249.034 265.994 248.327 265.647 247.797 265.072 cv
247.272 264.494 246.943 263.668 246.943 262.714 cv
246.943 261.285 li
246.943 260.331 247.272 259.505 247.797 258.927 cv
248.327 258.351 249.034 258.004 249.943 258 cv
250.851 258.004 251.559 258.351 252.089 258.927 cv
252.615 259.505 252.943 260.331 252.943 261.285 cv
252.943 262.714 li
252.943 263.668 252.615 264.494 252.089 265.072 cv
251.559 265.648 250.851 265.994 249.943 265.999 cv
249.943 266.999 li
249.943 267.999 li
251.398 268.003 252.69 267.391 253.569 266.417 cv
254.453 265.443 254.943 264.127 254.943 262.714 cv
254.943 261.285 li
254.943 259.872 254.453 258.555 253.569 257.582 cv
252.69 256.608 251.398 255.995 249.943 256 cv
248.488 255.995 247.196 256.607 246.317 257.582 cv
245.433 258.556 244.943 259.872 244.943 261.285 cv
244.943 262.714 li
244.943 264.127 245.433 265.443 246.317 266.417 cv
247.196 267.391 248.488 268.003 249.943 267.999 cv
249.943 266.999 li
cp
f
242.936 282.117 mo
242.937 282.114 243.1 280.728 243.307 279.035 cv
243.513 277.343 243.763 275.343 243.933 274.14 cv
244.082 273.081 244.462 272.292 244.961 271.786 cv
245.464 271.283 246.079 271.007 246.943 271 cv
248.489 271 li
255.47 279 li
261.924 279 li
261.924 278 li
260.93 278.111 li
261.231 278.077 li
260.93 278.107 li
260.93 278.111 li
261.231 278.077 li
260.93 278.107 li
260.931 278.117 260.943 278.244 260.943 278.439 cv
260.949 278.869 260.867 279.622 260.581 280.132 cv
260.439 280.391 260.267 280.589 260.027 280.738 cv
259.786 280.884 259.457 280.998 258.924 281 cv
256.914 281 252.949 281 252.943 281 cv
252.943 282 li
253.711 281.36 li
248.711 275.36 li
247.175 276.64 li
252.475 283 li
252.943 283 li
252.949 283 256.914 283 258.924 283 cv
259.76 283.002 260.493 282.801 261.074 282.442 cv
261.954 281.901 262.423 281.069 262.66 280.332 cv
262.901 279.587 262.942 278.897 262.943 278.439 cv
262.943 278.123 262.921 277.918 262.918 277.889 cv
262.819 277 li
256.379 277 li
249.398 269 li
246.943 269 li
245.607 268.993 244.394 269.498 243.533 270.385 cv
242.667 271.27 242.147 272.481 241.953 273.861 cv
241.606 276.322 240.951 281.878 240.95 281.883 cv
242.936 282.117 li
cp
f
257.775 275.555 mo
261.478 270 li
272.177 270 li
267.377 278 li
263.943 278 li
263.943 280 li
267.943 280 li
268.294 280 268.62 279.815 268.801 279.514 cv
274.801 269.514 li
274.986 269.205 274.991 268.821 274.813 268.507 cv
274.636 268.194 274.304 268 273.943 268 cv
260.943 268 li
260.609 268 260.297 268.167 260.111 268.445 cv
256.111 274.445 li
257.775 275.555 li
cp
f
248.943 283 mo
276.943 283 li
276.943 281 li
248.943 281 li
f
259.829 264.914 mo
259.256 263.385 258.943 261.731 258.943 260 cv
258.944 256.13 260.508 252.637 263.043 250.1 cv
265.58 247.565 269.074 246.001 272.943 246 cv
276.812 246 280.306 247.565 282.843 250.1 cv
285.378 252.637 286.943 256.13 286.943 260 cv
286.945 267.418 281.171 273.489 273.877 273.969 cv
274.009 275.965 li
282.351 275.415 288.942 268.478 288.943 260 cv
288.943 251.162 281.78 244.001 272.943 244 cv
264.106 244.001 256.944 251.162 256.943 260 cv
256.943 261.973 257.3 263.867 257.957 265.616 cv
259.829 264.914 li
cp
f
170.943 265 mo
170.943 266 li
172.371 266.003 173.651 265.39 174.537 264.422 cv
175.427 263.455 175.943 262.139 175.943 260.714 cv
175.943 259.285 li
175.943 257.86 175.427 256.544 174.537 255.578 cv
173.651 254.61 172.371 253.997 170.943 254 cv
169.515 253.997 168.235 254.61 167.349 255.578 cv
166.459 256.544 165.943 257.86 165.943 259.285 cv
165.943 260.714 li
165.943 262.139 166.459 263.455 167.349 264.422 cv
168.234 265.39 169.515 266.003 170.943 266 cv
170.943 265 li
170.943 264 li
170.081 263.997 169.362 263.651 168.82 263.067 cv
168.283 262.483 167.943 261.656 167.943 260.714 cv
167.943 259.285 li
167.943 258.343 168.283 257.516 168.82 256.932 cv
169.362 256.349 170.081 256.003 170.943 256 cv
171.805 256.003 172.524 256.349 173.066 256.932 cv
173.604 257.516 173.943 258.343 173.943 259.285 cv
173.943 260.714 li
173.943 261.656 173.604 262.483 173.066 263.067 cv
172.524 263.651 171.804 263.997 170.943 264 cv
170.943 265 li
cp
f
179.413 269.117 mo
178.717 268.747 177.705 268.251 176.575 267.828 cv
175.442 267.408 174.199 267.052 172.983 267.001 cv
172.943 267 li
169.597 267 168.676 267 167.943 267 cv
166.977 267 166.063 267.1 165.215 267.346 cv
163.948 267.707 162.816 268.435 162.064 269.575 cv
161.309 270.713 160.943 272.187 160.943 274 cv
160.943 278 li
160.942 279.133 161.176 280.119 161.608 280.936 cv
162.256 282.168 163.329 282.957 164.462 283.402 cv
165.6 283.852 166.817 283.999 167.943 284 cv
171.943 284 li
171.943 282 li
167.943 282 li
166.679 282.005 165.353 281.755 164.452 281.161 cv
163.998 280.864 163.639 280.497 163.376 280.002 cv
163.115 279.506 162.944 278.867 162.943 278 cv
162.943 274 li
162.943 272.967 163.083 272.147 163.316 271.512 cv
163.672 270.56 164.192 270.002 164.937 269.599 cv
165.683 269.201 166.702 268.999 167.943 269 cv
168.676 269 169.597 269 172.943 269 cv
172.943 268 li
172.903 268.999 li
173.771 269.031 174.861 269.321 175.874 269.702 cv
176.89 270.081 177.836 270.543 178.474 270.883 cv
179.413 269.117 li
cp
f
165.943 273 mo
165.943 277 li
165.944 278.104 166.836 278.999 167.942 279 cv
173.943 279 li
173.943 277 li
167.942 277 li
167.943 277 li
167.943 273 li
165.943 273 li
cp
f
164.943 283 mo
164.943 288 li
166.943 288 li
166.943 283 li
f
175.943 285 mo
175.943 288 li
177.943 288 li
177.943 285 li
f
183.706 281 mo
183.706 280 li
181.561 280 li
182.561 278 li
185.325 278 li
185.326 278 li
185.324 278.001 li
185.325 277.999 li
184.601 279.447 li
184.6 279.448 li
184.432 279.786 184.086 280 183.706 280 cv
183.706 281 li
183.706 282 li
184.843 282 185.882 281.358 186.39 280.34 cv
186.389 280.341 li
187.113 278.894 li
187.114 278.893 li
187.256 278.609 187.326 278.299 187.326 278 cv
187.325 277.469 187.116 276.977 186.763 276.609 cv
186.413 276.242 185.892 275.998 185.325 276 cv
181.943 276 li
181.564 276 181.218 276.213 181.049 276.553 cv
179.049 280.553 li
178.893 280.864 178.91 281.23 179.093 281.526 cv
179.275 281.821 179.596 282 179.943 282 cv
183.706 282 li
183.706 281 li
cp
f
170.429 273.857 mo
175.429 276.857 li
176.458 275.142 li
171.458 272.142 li
f
185.838 277.447 mo
187.838 273.447 li
187.993 273.136 187.977 272.77 187.794 272.474 cv
187.611 272.179 187.291 272 186.943 272 cv
176.943 272 li
176.564 272 176.218 272.213 176.049 272.553 cv
170.049 284.553 li
169.893 284.864 169.91 285.23 170.093 285.526 cv
170.275 285.821 170.596 286 170.943 286 cv
180.943 286 li
181.323 286 181.668 285.787 181.838 285.447 cv
183.838 281.447 li
182.049 280.553 li
180.325 284 li
172.561 284 li
177.561 274 li
185.325 274 li
184.049 276.553 li
185.838 277.447 li
cp
f
182.943 241 mo
182.943 242 li
204.943 242 li
206.046 242.002 206.941 242.896 206.943 244 cv
206.943 259 li
206.94 260.656 205.599 261.997 203.943 262 cv
190.943 262 li
190.629 262 190.332 262.149 190.143 262.4 cv
185.943 268 li
185.935 268.009 li
185.958 268.037 li
185.947 268.003 li
185.935 268.009 li
185.958 268.037 li
185.947 268.003 li
185.953 268.021 li
185.953 268.001 li
185.947 268.003 li
185.953 268.021 li
185.953 268.001 li
185.934 267.995 li
185.909 268.023 li
185.942 268.008 li
185.934 267.995 li
185.909 268.023 li
185.942 268.008 li
185.92 268.018 li
185.944 268.013 li
185.942 268.008 li
185.92 268.018 li
185.944 268.013 li
185.943 268 li
185.943 263 li
185.943 262.737 185.837 262.479 185.65 262.293 cv
185.464 262.107 185.207 262 184.943 262 cv
182.943 262 li
181.839 261.998 180.945 261.103 180.943 260 cv
180.943 244 li
180.945 242.896 181.839 242.002 182.943 242 cv
182.943 241 li
182.943 240 li
180.734 240.001 178.944 241.79 178.943 244 cv
178.943 260 li
178.944 262.209 180.733 263.999 182.943 264 cv
183.943 264 li
183.943 268 li
183.939 268.582 184.198 269.122 184.579 269.466 cv
184.96 269.815 185.445 270 185.953 270.001 cv
186.524 270.009 187.151 269.732 187.543 269.201 cv
191.443 264 li
203.943 264 li
206.705 263.999 208.942 261.762 208.943 259 cv
208.943 244 li
208.942 241.79 207.152 240.001 204.943 240 cv
182.943 240 li
182.943 241 li
cp
f
200.943 252 mo
199.943 252 li
199.943 253.66 199.273 255.154 198.186 256.243 cv
197.097 257.33 195.603 257.999 193.943 258 cv
192.283 257.999 190.789 257.33 189.701 256.243 cv
188.613 255.154 187.944 253.66 187.943 252 cv
187.944 250.34 188.613 248.846 189.701 247.757 cv
190.789 246.67 192.283 246 193.943 246 cv
195.603 246 197.097 246.67 198.186 247.757 cv
199.273 248.846 199.943 250.34 199.943 252 cv
200.943 252 li
201.943 252 li
201.943 247.581 198.362 244.001 193.943 244 cv
189.525 244.001 185.944 247.581 185.943 252 cv
185.944 256.419 189.525 259.999 193.943 260 cv
198.362 259.999 201.943 256.419 201.943 252 cv
200.943 252 li
cp
f
192.943 248 mo
192.943 252.535 li
196.388 254.832 li
197.498 253.168 li
194.943 251.465 li
194.943 248 li
192.943 248 li
cp
f
6.94319 276 mo
7.94319 276 li
7.94547 275.656 7.77521 275.37 7.63188 275.223 cv
7.3707 274.96 7.17166 274.898 6.98494 274.824 cv
6.70644 274.728 6.43564 274.679 6.15697 274.642 cv
5.87988 274.607 5.60474 274.589 5.35219 274.589 cv
2.91615 274.59 .943689 276.564 .943189 279 cv
.943181 279.263 1.04986 279.521 1.23607 279.707 cv
1.42227 279.893 1.67984 280 1.94317 280 cv
2.20651 280 2.46408 279.893 2.65029 279.707 cv
2.8365 279.521 2.94319 279.263 2.94319 279 cv
2.94319 249 li
2.95196 248.33 3.18283 247.906 3.58206 247.561 cv
3.98385 247.224 4.60553 246.999 5.35219 247 cv
5.50901 246.995 5.80071 247.056 5.92984 247.128 cv
5.99694 247.168 li
6.00481 247.175 li
6.04837 247.127 li
5.9976 247.166 li
6.00481 247.175 li
6.04837 247.127 li
5.9976 247.166 li
6.21094 247 li
5.94319 247 li
5.9976 247.166 li
6.21094 247 li
5.94319 247 li
5.94319 276 li
5.94319 276.263 6.04988 276.521 6.23608 276.707 cv
6.42229 276.893 6.67985 277 6.94319 277 cv
7.20652 277 7.46409 276.893 7.6503 276.707 cv
7.8365 276.521 7.94319 276.263 7.94319 276 cv
6.94319 276 li
7.94319 276 li
7.94319 247 li
7.94739 246.591 7.7866 246.196 7.56568 245.925 cv
7.23014 245.512 6.82604 245.316 6.45087 245.183 cv
6.07048 245.056 5.70206 245.002 5.35219 245 cv
4.21585 245.001 3.13303 245.334 2.30106 246.026 cv
1.46655 246.71 .934417 247.786 .943189 249 cv
.943189 279 li
.943189 279.263 1.04988 279.521 1.23608 279.707 cv
1.42229 279.893 1.67985 280 1.94319 280 cv
2.20652 280 2.46409 279.893 2.6503 279.707 cv
2.8365 279.521 2.94319 279.263 2.94319 279 cv
2.9456 277.668 4.02223 276.591 5.35219 276.589 cv
5.58817 276.588 5.94678 276.621 6.17022 276.67 cv
6.30187 276.704 li
6.33539 276.716 li
6.5358 276.266 li
6.2012 276.619 li
6.29491 276.704 6.33307 276.713 6.33539 276.716 cv
6.5358 276.266 li
6.2012 276.619 li
6.75626 276.034 li
6.03999 276.402 li
6.09494 276.508 6.15555 276.575 6.2012 276.619 cv
6.75626 276.034 li
6.03999 276.402 li
6.82187 276 li
5.94319 276 li
5.94214 276.15 5.98508 276.298 6.03999 276.402 cv
6.82187 276 li
5.94319 276 li
5.94319 276.263 6.04988 276.521 6.23608 276.707 cv
6.42229 276.893 6.67985 277 6.94319 277 cv
7.20652 277 7.46409 276.893 7.6503 276.707 cv
7.8365 276.521 7.94319 276.263 7.94319 276 cv
6.94319 276 li
cp
f
39.9432 263 mo
39.9432 250 li
39.9432 249.737 39.8365 249.479 39.6503 249.293 cv
39.4641 249.107 39.2065 249 38.9432 249 cv
6.94319 249 li
6.94319 251 li
37.9432 251 li
37.9432 263 li
39.9432 263 li
cp
f
.94319 278.999 mo
.943189 279.002 li
.94384 281.763 3.1815 283.999 5.94319 284 cv
38.9432 284 li
39.2065 284 39.4641 283.893 39.6503 283.707 cv
39.8365 283.521 39.9432 283.263 39.9432 283 cv
39.9432 279 li
37.9432 279 li
37.9432 282 li
5.94319 282 li
4.28611 281.997 2.94619 280.657 2.94319 279.002 cv
2.94319 279.001 li
.94319 278.999 li
cp
f
46.2722 263.753 mo
45.5651 264.46 li
46.3247 265.224 46.4378 265.832 46.4409 266.121 cv
46.4352 266.22 li
47.4272 266.346 li
46.7202 265.639 li
36.2842 276.072 li
35.4066 276.951 34.3192 277.442 33.3379 277.708 cv
32.3597 277.974 31.5028 278.009 31.1602 278.008 cv
31.032 278.007 li
31.0047 278.006 li
31.0038 278.006 li
30.9472 279.004 li
31.9456 278.947 li
31.9456 278.946 li
31.9429 278.791 li
31.9422 278.448 31.977 277.591 32.2431 276.613 cv
32.509 275.632 33.0002 274.545 33.8793 273.667 cv
44.3142 263.234 li
43.6072 262.527 li
43.7359 263.519 li
43.8342 263.513 li
44.1217 263.516 44.7307 263.63 45.4931 264.388 cv
45.5651 264.46 li
46.2722 263.753 li
46.9793 263.046 li
46.9073 262.974 li
45.8268 261.889 44.6892 261.51 43.8342 261.513 cv
43.7104 261.513 43.592 261.521 43.4785 261.535 cv
43.1409 261.579 li
32.4652 272.253 li
31.2655 273.454 30.642 274.878 30.3129 276.09 cv
29.9841 277.305 29.9435 278.324 29.9429 278.791 cv
29.9429 278.949 29.9478 279.044 29.9488 279.061 cv
29.9996 279.952 li
30.8906 280.002 li
30.9076 280.003 31.0021 280.008 31.1602 280.008 cv
31.6269 280.008 32.6461 279.967 33.8615 279.638 cv
35.0736 279.309 36.4971 278.686 37.6983 277.486 cv
48.376 266.811 li
48.4192 266.472 li
48.4334 266.36 48.4409 266.243 48.4409 266.121 cv
48.444 265.267 48.0661 264.128 46.9793 263.046 cv
46.2722 263.753 li
cp
f
40.7551 265.307 mo
44.5741 269.126 li
45.9883 267.712 li
42.1693 263.893 li
f
29.9432 267 mo
28.9432 267 li
28.9427 269.212 28.0492 271.206 26.5998 272.657 cv
25.1489 274.106 23.1551 274.999 20.9432 275 cv
18.7307 274.999 16.737 274.106 15.2862 272.657 cv
13.837 271.206 12.9437 269.212 12.9432 267 cv
12.9437 264.787 13.837 262.794 15.2862 261.343 cv
16.737 259.894 18.7306 259 20.9432 259 cv
23.1552 259 25.1489 259.894 26.5999 261.343 cv
28.0492 262.794 28.9427 264.787 28.9432 267 cv
29.9432 267 li
30.9432 267 li
30.9425 261.476 26.4658 257.001 20.9432 257 cv
15.4196 257.001 10.9438 261.476 10.9432 267 cv
10.9438 272.523 15.4195 276.999 20.9432 277 cv
26.466 276.999 30.9424 272.523 30.9432 267 cv
29.9432 267 li
cp
f
21.9432 258 mo
21.9432 255 li
19.9432 255 li
19.9432 258 li
f
17.9432 256 mo
23.9432 256 li
23.9432 254 li
17.9432 254 li
f
15.6503 259.293 mo
13.6503 257.293 li
12.2361 258.707 li
14.2361 260.707 li
f
27.6503 260.707 mo
29.6503 258.707 li
28.2361 257.293 li
26.2361 259.293 li
f
19.9432 260 mo
19.9432 267 li
21.9432 267 li
21.9432 260 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (ADMIN) ()
%%Title: (shutterstock_1068459137.eps)
%%CreationDate: 5/19/2021 12:43 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"/LBiee)%d<fFkL=uPf[k)GQb,LK!F[?,79GJMZ2oMmQ%\G*rpYC6PJ#b!6NK'?HYPNYHDUot\rnYgZ7Oc$nF1JiYu.Y^DO6iB
%c)+`4;p6U<(=JH9\KCef*o<h:<'!UH9]1X+@V4DW!B/'p*e*'U)8B?hQ6,@W7X)W'/6+a%CpV]/G@je,+,*1!Vf3$Y'N/S/>-7U5
%C:R@n4hs!LS,@T7>-"_^g\!llj^fD4Ut=VdUCMYT"Rp=1pTHOA!6SBS?)SUe7eGYlp#RSpJ;Sirc4;D6eP<SZkZ414bAfpUg@QZT
%I&0i)56*EO*rIeu5GhI22hf:U=7T$f/GQP5SjF'RWP''63oVY#(qJWJ8,XZ*DI<J@T4o,ACXIJ._S8YLH:.8Vhd8Yj6m?kNMK/EZ
%W"7Z)"pc([Psbp"<pHejTj&,b8"Cd?;k=q?B^!H/)BF,iTME*/92Xs]9]+qLQ_ZsgO.b3UY'dERrgZ]"<!q_Z>BT+,]:6#'%Gf#@
%E8jiJ%j#MOp/.U="hAm[(<W6$BpL8,BW(fVX]?!])el2E\&(*UZu7I#:s`hA&NaG['fc'!h8aiEn=tSMk:.g*X\.WXGq:F+*VpZ"
%oDDS'GpYdJ5Y(WF.YJs14MclP>\LA/850uD+;%?)a$/2^A__'&Dl\lNBfC"(K*)r":8jD"]j33o?%jF;aFB&tA:ho&6N',KBb3S>
%>A<;%\E#]_'@D+RZ]doYX,V/.=i\8??u[(V]`CKof">"tg4K)/83F=[K*:+Y[g=-U)bBbA+1q*Qi-N03#X>K$Rua\r`_H'B+(It*
%B!IL[Y*?NB2Y:lI[9("r_K]fhN6'LW]2/PI:c:;$6FA]M!^UL4]98>l_RH8<s8Ot6_f,e&@0oKgC?'Z;endb\9>&kQgohG2Km$)d
%?jPnphr0n'aN9T5`(Kdr<A[!O=s+SH7GoHT5D'OCkr#P_eOC&U!@tOhIl?$lfO;2AUTfX#G,Fh3jX#f[LJ#$tQ_^URs"W(&6MCt%
%JP)]m0iF*%.q+[RKY=8Efg;fA]knQhGL]T+\c(0k9-#p[2+.>!h[QLIDrN/Bnl7i2_mJ7PCWQ5AE`EB:L1'-(2nq(+o@6d0i5bjD
%/m9s0jXM\B:Boda3;GcHT^]L,nQ!`!s%tF-CXl29:lds:@G"OP[7^EgVd"G3<Q^XrjdqW4r$N^:"o]esrR5#UgMX##n.ejsa(i(m
%a(D[76>nZF^FQZ@6:)SHDb9M8R*hWaf(ATmF'0o@6`6aWUK2q[Eb;r2r3IP=WEH1L\T7Kua&=e+KmG%&"ZZ<-3):9AjJ;M=?Vq's
%["+5?pfGJu%f0iVcO[^>ME`(I#YsQClS8(ckn8H<]scB3=PAAAmK*#ob&pTDWUib1<W2t_!a3@7$rrG=cJ41>;DV-Jr'N:K6kO._
%bL5&seA-R4aCacT?XN8t)_E=SqDV#!l!NnGi.&qY2MUCuF]&^*`]C!+aV*]"e-X`h5KY.+V#HF0"0j-DB,jmI[55Hnk^l84?dEBc
%l4"N0,ns.KrBgT\GB1=Ro)@_5\^]8=oi_G/VI=#CX2W+s"_Ph)J\9KM(]IDiIGtmU/)=3@j`[JoYXiM@'1?D\`d`,\TEu/oO,YtW
%fA?u'c5[8<4E+uh`c8a0C6&Q:J*?e5YlQ(RiMkOQil1qC;&--@[I1au;BSk>$LA+f]L#k#oVp`BZ&NAUB2t!M[+6ck<6DCZUdjaL
%;S69Hmdl$T?!gY@`EMA',NCYpqd8f>1^YO2Cc(JXTNV%A>5;s2Dta(o>D]l)V!7oXMU$APk\oE"$AR^9Regr])\MlB^$>4'L2uJ>
%cej4uruHhcVcGC_+#?ZD+>n4:.Far'nQhu;HhXQ!B2F'cj%[30'/E0dCuCr9Eqf!%m8KCe7J"`8cqDX\lZL,<2eeT7g3T_u5@2m?
%+2:CJ_!Wa4S'SL?f^+2CQ)i\^j^,s-Rb.GaDrXRu4.1"N[S%@?L\Z;l'/7]0(A4V-\qMn!>(*>Cpu]^-Q;t<Q<B:r4NX9301W5i?
%@^FE6Vb4IuW":ps,krfdMPQ-</rgu#9:N)Rd[X4c:(qhK!OF!$f34N)j-Vlf@T75F1YSQO&?sV`U7SeHX[9RgjBXE\*g5QldqX&i
%G_K<YinuA)VNr:8c.#%Qe#hQZg[e-cBY[NTq:JEtb1LkM2b^UdX\(\*WR`/,,.NuD1l0Rs(E/iF!L0;M!shoMJ8Q3NS5]E.\\"iL
%=_YY'7CVZA;7IG,rXs7Io3\SQXg%-=J/VB-mE67`h[?!f'nI<frI2B,WO0EA;MUOP\mgGg:or6Jh&f\o;CRoIPtLiP?('_>9K+1\
%+#[=frt-i'o[db>r)E[#eUjfC;C?Zg;!Pa_Q$*PQRX.(#bfp9a'8Fmg;Z:q>3nnP\QCEA@7(oZV*qBa0^!I:]`]f7S/7VGp&cYGe
%58)l3juRm2HDWndhl2j@O7eanl+`1),/e5*X^Yd%V0:*LFbRK?WCY+Qj[N"t_)mq-SJa*OKSSZaLT2$bAFHeXJjK"F7ugH+hYQ=@
%NS?tY/`1KTSf2jVQb"nG-oANc'TDWMkK/0Z(@uH2%h'U/63p&,%<m?7TR'eMDO:H3-R-ikV9QEg>"r)n\C0g'fpH[S#rR$dGc0;6
%5+%b0#H"ehrG+M*E@l9ZorkO+im/aB1<4?`<fNCd?VRZM\gkEO!O4<3U)U#FMpi$4@\Hh9Pb&dLd;MXbC'uQoL+<0(Mf=TPJ;b4t
%-BstdEi&]P"Hf/+D0FsS]2<q0B\J?AWXZe>fb$;VY9ITUEQ3<11\].'7N4+ef!gotMC*>Zf&9U&!`lo72=4A)Hi!urc9o!>"MmR)
%ZmYB3]*l#MO5J<:#_OMYP*ZI>f#QoF@?+43>Kn@09VtXr:CbCprHr>dLZ&jU6Tb+YCmmm%k2^1";1t&scD#2fQ#7V\FN[88m\rKr
%BLd.T4cPYd%F"$L&89L\c,`76WTDbdL^O<UN$i/p-4'#c#N0Ca3"#MidZW8/LoV?fBj!D[`J_ep.PQ_OSAa2.EfW%`)Tf8Okbj.9
%%ap4W&XQ;>39YI"RBiV7C1'NsdrZ1-iC0:)B5h):3]Q?2`p7Ef._eMSL@m.\;jISL(kq\m?URe>oe_<HMOnLEW6sgdn:?%C(^i-R
%)=M3_<BM"_WPSM/WFjfS\D=%U#^F-l,2A4.+s;>hs0Q>M?`quQL]eFp2(tkb5>j"KQttG@d5Chcd_F(+4A&38r>[=7]4ZpWDf.V$
%QgsL,GWeYAd)894Ko)g7ku;R?:G$^\S6:_!WphQ6J_@]8em=eAj^cmj<kJ#kle)l%f^\t)D/ubL_/]8P8u^KoDXZT5o!rodWc:^i
%G\6h5jE<Q4Cfg.opCmOF'(Z;9pg(6)\(:AITF!P*7dUM!&<(N`cYK1?ded@Ro2E"kWDKW4C+gc[J"`^0;QEjpnVjT58>Sf==^;6-
%/h@mb`;B.,6AO(uX]L<G+[4M.ent@/;eb10e$CqMd5lM-k?.s(B[V&o#0&I/T^giQf++J_iD1@Q`!(4CZZj8%4^HS^/tlT<.^bbJ
%QZ1:rXb%5^&mdY?<9cod(iq)@g-#hYVjd^!0KRUo!kTCgf1X34WTNGJ$.8'mp-U3)P?2/HR_/\^>*Gl(d7pC*.G%n1IM/X1^1fKs
%21:;4Gq>C=8Y>:M%Q*p,V=mTR!2WddDst53mpm?%gB+O(T?"f[+\$BVclkf1WMf7f[@3$G$DrAMgGqOcgu7pdb&butX@a:1apk;A
%Q,f*\&nq8C[f<O3-GCh9n^RbG]:BAHLeuDrW4+pg5=&8t@lLj1H3R595@-U/$1E/B)"B&n='%W&Cpls^=WE"?H*7#J7euQlB*U+O
%.TlHn`X9sUI:5:*T^dWGdOr!jYF&W!g<F-&oUKMb,diLdg@]R4"E'p\0Tl$@csBsmPj2,4CTMT]^7<n^c$F9kH.2:;>N2ti46dqP
%eI@%^CU.^$Sjs;;)#u2;Im!%l=j1LPm_o0doLYYn2)!2mYm&13L,"G^fVtr/9-UU>473gs6B"Ju[^2dEq,qfpgYhFIorgu)^XBiq
%P`eqi+0Vl!/^6.G:G!(7f@>2P;O/JW`2>Tq/ueWpk/u.po.\#%>@#>h!eNBMO,Np2X3_fS"9]-3aL`!Zr.l:YgTZunRdm*-V2MWA
%/bDH-!P3c-o)r%M02/;Ur3C@Qnq<YSV.O9<N7qXWJaUG.L:."p^Ki9g3sj*5,P!VH[,*F"EQsUq1s.;Js(iZ^IO2-biU%9U9'j[l
%Hkkfj_`>KU9Rc[BDSNi$0XG$76):?)G&oIt/!U_g1VdAHl1F7N\A,G!SN^7[TIVgF)r]RU@CSJ8SA3_pbgEuWFLln[Uds(W_;ah<
%@Q1Bkm9KQ0m%$;rXc9FF>(?SNG<.ndFX<TM(`c/Fa0l2&Cqt+mH[jfM!1PfJCk(;`iK'Zj((Zc0bM*s51&Mpg2%ZiB036Y8NCN=I
%JM/'OIN+&,7RomeokS8_$]B)#\4hOc:KZD9aG4+pZWJc8i_o96[c!4O!@7Ya.G2DMJ\T4fZ$6OjejhMh;c&iHXFZ#siJ1\GInf=i
%kH!9NkAUW`U8iSeF"lF$5Gh`VlWUaFreAB:/5EBt?2-=4Ih^gJ+^ZR?`O72;eq?jYO4Pu#>5%*!rbq7`f=G0<*]aC=+'0MM1,S`>
%JhGACmk5]1lO9u!/l*%?pXnSBEG5&nj^rUEG\-c7?4!S;H/a6Td0#S*KBYJ'Z:T8]b0]scoC^a!q"sNBekg_@o<t[.hVn+[(UBL$
%?Cn^.021XpJ^<ld6q:`'*o3bIS9XfQJWX;pg)us&!L39<[/f4L!8iC*Nc&2)r1U-Q#A16!p9*A@bl_0Y?RX1ikPV6.?L2:Zp#WM5
%#>5<`:F"&`1P8BNBIn6%m:pZQiF.1XUj5#+^3nmf?%/.m:G%#WX"Hn!b*(RJI7)-h&X5d,^+Im)[uY;Hf/E@cDnC+]Xj1k/:9O$G
%gr43(9)dmdDJe"#6]\(Ys.4Mgg.kErFPFNm;IaKc.6k5maB!6&G^IB4?S#_g.\0B7lBe!Jji,p/qhLU,Rn;boceY?aI<Oa23u`OI
%7;(n*C&;`9#5[q?Ed9_DI(lmhhAc]>bI,;-?*<_VU@6EMDWk!1[-:=LKU4Yp#!Qr+mp'o_s-UNi>[A^8lUu,BH?(`%>$ME31BT-d
%dhd+;H"Ub5fs.PIrt`cTGC"5`SPB^49V*:RDqq8>.jkai\"-6k5AbPJV?<j9`[<ADdc7s;hpN1EiIk$Nft2d/7dntUQ3Ps\RXt(>
%G;<Hn>jRF,#5HY(.X?=c4YUn:Ri\)'fhE!>a^TSKLJ^/h^W1=.N6XKMl*4$loCVfm^6tSFT$*oW57]<CViIs@e'f,6pZY@kH9=?3
%>FePOp&33N\)UQ<FKdikVN45RRZDjO8paKh=)$R*DPr-+*L[JifLC2\.".AP/![?.ddn\2IX5F2CG5YNGlBV7fPi4ebHhj4l0S6(
%FaA2+4d9:-s0e<O(iEWT2tpL.l0[`UV0&joI%B-m1c_/a+7V8<T8Q@mFFJ:dV2q.qU\+*:rBU4d3OP=TE]no-CbAJDr:JP&g-tl(
%+eM@CNt:gGnnDkfI8aInV=0k,DYde[fgs_-cb?6FH^XR!\'iC-FE`UY%&>fiNrt$:jdgsbjh[(1Z+JJ[J][7+B4/;,r,og..Ei5t
%GGbpe#5J/`ej-H$3]8ZNgUJ)&(bL+T=DXUX)p$kVj9O8=[b8IYj^r?PGHnD3YZK[i!sc6[NIdkmn_q9O",&:mC'+Riq=O>FYn!jR
%ju1=Ho`tiQ#@!MsXo2W@flT`F]YT/HHY@AOIC^@;Y80n<Vt8cbTM*U_5s@U_#D7>r1\gM+gs+d:_>T_:Q//RU_2Z+62OHROQlk+u
%pripQn)pSRcN_E[#;=!G^gLTcclT:Dk3IZoAG[G#$oSU$GCuHKV;%\p]h^RSUJok#TujA.]-1g)qgO@!O6T*k`V$^6L$_oe.(eK!
%%W0Rhl(OZi'0^LleX7L?aipmu?-F;W%i&[]c\HC][dSql^31QQ>2AkqE-gql*nUm^SF5No-Qbi3L>CZPA(^*"9b)[.*Ea4cG&Hlg
%lZ\uiL3L)ha+s88Ao[T^TR/_I<I=L!>e[Cf_tVbipP2s3V><`o>[SeO&*;+^R?;f2K_Y^k,I@:8q8d#fBaiXQXF&"B,<Me6NKM,@
%WVMZ0T@\uG"fKL4DCbX4Up4s')0q_n58bL+S4nu==(Y2tg$rWcFRJbU`TZl9PDsJJjiaFr(CQj):T@p,dAt="S^ADFCiZnSgUnTp
%4tM.LCH/mZT,u22KVr<dkfo.4hZquBe[;s:YoU'2@u$'AaOnI#Teog,C?<HMbDnO4?/?V>+'l%6`b2T@qr<,X[kRgGWfn<-s0g>n
%hp4ELa%s1M-f\R'l0\$+_BH3&s&KO&`:1pYabe6_q;?pM\ajUsdft/dfUtTsM9dEk_SfT`E]$^q'eUgSWgDl^h<+D+jS8N;jWk/$
%f9:7p"3&BIYKkDRmaOjGnmppj4]rWc$r>aK"I[C"^]>cJQl<RX>b3-TS%DT@VjljJX.?Z`e6]+13-BDT:T$fll0;6]pi%uOco?E?
%SfV4*SG$TnQ_p*m^R\&:f5@&+a8CNaJ%[hpR=<3sgeC#iIW7-,bNCr)DkpLY/Dddr9kO9Ilm-YBq`'fhC`dM)C0Q\ObeP"m3&>u%
%:n.j7K7#$C\8aC42qt/b?]MRtAj@C4bd[POU,+^9o[0@&K+H6T?<D9W]).-*na4JU;uB>"df@DUnE*g_fXUA;pl%;,+2;kU$dOcZ
%eF\T%FL+]NZ*AdPL;-`T#ald*,R_lI)VNDBSWVBXbW71Snill8)]Y^7/,9DBf_AO:j^4)4^;%<L0>jJPHCqeYfYGTMAs?[Zh<ZDV
%s6,NJXg?+MFuhA-AX0Tq%dVK8%\J-9kjn5]+5lJ<lnCYmfc0+Nl!&pmS!ri[M2C=i?Jp:gnCEn<o%r=krn8mR`bOA>n8-%8\6tmM
%NgJ@:L0MFH54ssQaFdi;2^eMu)(1oE]p%C7`^VK2c7ZH]bJN%P:u,Hj%gVhE8Ot>cqr.+eE@^t"HM9/l=rDpS++0TISZ&-.St0.+
%8;$a7Zp&h;\SKGj&*I#Ec.pZhXZ=G-lYCPl/#/ZG_j/F#>kqoGFKShe:-L^KKDab=p:gBCs/ra)Yn10!J,FK]jm2j:VmGaf_F/Zs
%I^a8tR_M$-g7E5"EOmj3^>3+_?R];6lu#U8/mNnZ5o!L8<Eg]?VPga2T,)V)Q_3tT\c#<X[AfEem8bB8SCq,==^:O^k[K!W35&Fs
%5I?a)=-jFjZuB>W=tQB&/tLdhgaq9B(@IJY5<djULS#[SbM+VH]mR6#5.KB_QR78X2R>J2ZV)RQONi!]>M5M*qXM_Tl!o"XhqRP"
%D!bdh/!hW-9.R-J48IEpObN)cE\K5^H?>9U>-1QLcdkQ]mQ53*1O%g3DWThjXgm!MXJ]^OkL]NOE4*D?^5HgY08E1^lea&0gD`nt
%S_[E$Da/'.hQ8DHe0f"?Ro>*s$_'fLj7f$5kG@P-ICS.j)Lj$E>76_4afYL"h<!5DEFiR*D"#$C4oaX/GT.D=+W/O?2`DMZcZ8X/
%"L$hIntShk\\$nnqjh^cICum_?-_jX*`^>-rUO3>GLF7>gKjANcZ`1[i9kL]j2K/IAnPsuDro+bHfkKl;g[D&+%H"H?"%]%o@(\=
%rcRt8q`0(MoCt=JCCYaK$ce!Qc0(QfDu=!ZB&>WD7.:),j'_#u6%/K@.mHrM3QePO*#/!GHfM6GoYAH,@;u#+j5L"(f\YS(pSN0l
%;*#a\>!Ci84o1=Kr-[!XS9m6X=7bkMcJ?@_n]f/?rQ4hT*jajr/D]/&SU:`u#>Wu3$`g2^`o[0`hW3>El0ZA`l"oqVOFO]ZGuQo<
%4=@t3FJ4$PAbIbNl-&&8D"C;JFZam9hK1*i\*<;1H24JME%sO`8mc+aX'[J3MQMTUoOVV;fNc_hc5&'o53I!Rc,6!"`<tJ[eR&*q
%buN;d34dBT*N`XdNk,.3l1AlalT!XHr0hK4%puNc];<BkB(;VbC%:ton7?T(?[1A]s'2'Uf\\>'Q]Lm!m>9gg.G4#/".N3&j.;U+
%gREo&2g'ISr`jKtjneNCG_Kup]Wsd%A[t^^c5k]eNGkY_]p$pcRtmJ%H:nS#]\Ubl>i._eRcup1\M8<;5>se\X$*iE<H^)\=8dM'
%HX:RUk0Pirp\%7Lp\B`hqL.[QF8d=&WKeQc=-ic>c@)`iqmcJ_W1?)_Q28:1IA+CM0jh+kOgV=2kZBgu=<2N;)Pn<a^,b:f]$7>d
%HIBGV/pqIIB5b#^T>1BZC/1Y8JBbR]lN7*0Z<8#XVeN$V?HcXq\$%1Wp!3@%:&'2SCljB>@P9J<Q<FkJP3!&)A^%<3T>5m?P\'FH
%=ME0%b#mBA(VWso*c'SHX&`Bg3?-Ip)C':U5&nmfPO%jOdh0-AjOJZ;P.8RD;_AASKQG?jK[<uo_]N@i46;L#EXf:HLC-1e8*=Q,
%"W$nHq\l]8#TZU'FCaB'=OCosgFn]uSGr?CO2mjlWb_h[k8Z8tAU$JMMq@s=mpO[$e>IbGIul@'B_]Lf2MV<13=O]m(6n8d/m\h"
%49f4@oGffPb^^6@^a\^2abmY]4(3l*'HtPe5gdof`(pt(!3g7]-2>:K161fm:frGUe54L\_*Hpo!6`^h&_-REs3,,AKdu+1\eZ2Q
%f3(t,2?D/d5O1,_L9IaK3f?OBX7m6-&s0cZN3UZ#Hb.YPiUNN_FLm0Lf1&)h\I!h1+sBeU>8/8]LU\TC;GZ@rF$U6-#frndOY?t<
%;>rdo[G_[-32;454TYug$k(t:_+h$S9qHq(ist]#Toof,"HI+[3<Zl1h['^IJ0*['-LRNNgG0.hN:2(l/::nl?7''oTOL/;isRG[
%1')&+$YdTal;jdfS<\t*SA9YC?"E!_=""b8W4FZ:D4,#RR)Z4nRg%oJ+>;bRr(9o\Tl+bj16uK;KgKp=!PMA,NfZF5'?Yooq"8%(
%dO-m33Q+O^_#Ff,".]7_*(!l69R%uN8qN#>WTYJA6:h>abRr%?KEMN2oL?Va3UfGaBCZGNkCNt^KhN'=F"'">5R-uqaUg.TKMnbM
%7,cdp'F]gKR;a@h#,'=/8V\2+"+`eS-D@S%Sh!@APR4U8T?>l?=U\Q_3A+;e5g'mu/dr"d2ZWHEb0Xan#dU,_';R7ZTL-a!$:1Ds
%#cKsTo]W1dd8$D,+TF8sDQ_]<W:\kQfb>C"p9oX/j+5J+',qrBeP:5\mhD,cf8o'$@Rqa?T)??6$6Fl>ZflcR^7OI1FI)BnV?7A?
%k4u'9*@6_hJ9_p#Mh+4sP=-OEL;]:k3.[Qk8^2N`iksA4Qar[b&&i+L*H=+'an\04o5gI><sm:Vb<IoNX_->U9Gs->VMRDu1#+#8
%;d>brM_nYcIC8Qja50LI<(phH\gB(U-*PU?,`p.jrpY#hKMhPh4dQ\4n-nggisD@fj*3H23X7YQ@Nk5b,RDC@kXuW^s$u*r*fWDW
%a8`d3n\nMFIm+qRl#d,&h(\B>7O-q2#A/>nIU2/1O+K)@$ILdCcpM7VHla93i,?H]#sZ%T$"'6Ldd7*t&$m[.JkQ.X0O`o134M/&
%C4#_I!1j4o0@77.T*4)b#p7,VG63XCo;%EK/f-Jj:b>a.$Kuno01&c_#eqJjEP2U[8e=T:P(I$@#(n^5PUS.eZ@-`%J>ME:pOn-j
%>*i!E,Fg-cCd*/%"=ibqMDNI!N#iH"7Dh*Mc5#I!J)MapZe#6c=?2_)1?[j(JM68-<L.Kui-ZCVFFs!94I-s/`=#u=9Aqn$8Duhc
%;COj&R0eL\\tO)U*7,r.h.P/_$[JC0@D7h9&5!^oJRsqF-qj:Lr%@B*J`sXd]tiSA7&_Q)-jGt=b99l7Qm5lmW!@H-j`c!E?9TU.
%m!Dh=1[c_n4&DQ"RYag:rJ497f;6?8kH6@/=.;HF/(FV2/p'G,(0=u?ZH*)MVGrj%n#`$%H5m,sFMr]*9#7j"+=>q":_'K*LC>R7
%8%0KT:VN`l_BkcRGu/W_$CAmjW\p)*O,5W8T_JXjk=i%HIIpsAN#IagJponJ4WeH*Kla@[#ou$J@211eB]+fRbCi*?>_j5q+YsjS
%gd%t>IIs&'/LX#<&u)hG)%XbKPaTrFMLTXIE^<]YoBcnm%f"h",nYssJnk6K1N+WM21:CVrm5/F?d8?l[f;Z@LTZ]M?52cDoVKSk
%@DYla""m'*#3@$O+'*bg/B+SjgA+Nrm"^gu*dCQ/S)Xr3@N@]+k6F?n'B0[c<JNVefl7HL(BoAX!I7Q32$6ZecN>*fb<ZIf,aoTV
%cJg2YK]u(,C5;XXJIGPd%('Ru`[hT#1e-8PE`%qrMM/K_kCtIFEj/0%$W>@p<BWVO,sVm[:fT*SALRauOmZd2QT*6Di&lB0@+HdN
%;k=5;L^HA1i+2.P"*u1BMGY*(j$5nW)=JXPQlgaDd6/$;8]9R!`/,j,51i+O@rd%EK38Z-W[nf`"!q@Y_$KSlgdtp`B!/>KdYBTF
%?'h!8IY-\pL8+m&Ath_kM?8u1igXP;0/Nt#+Y\`1ai+[GAOgi):*ee&Xf<:U_IA%d!1#<iHa!^i8P2NFJO$2B"r'c9s$Q"D(g.\l
%$9_<?8L]e;O._$'#!moq.P!,<YR1NI*qeWV2B\Be!i4h3n;IU4.o)1=9&XbP![u"_-UaL+=bBXET[(TVW4nY44Ra6k)!rG;E)gEd
%Hr!TD`rjJEQl*f(#/*8&1Rn^S#!-*^PQP8:,"n)55a2lM`EWlD3JQV!M"@m,Se]9$TNW2;o"_eW6D[4\7"Mk'/g7&l,VTPrd#XF=
%JafI72$hDu(m-!g,//?refb;#5hj?,GfUJq+P%rD&4d6>,g>m#]M5Mdp]:Y@X_s#2KBFEEQq#L"Ue0dU[EM)J79/2\>JOoN(7k=2
%-o->j&Ej:V6]/Sl7>jRPcA3I)b`oAD\.6BlDc!f[1^RGG(A_n8!3(M#Vu+(I"i5`\cnssl>[2]<U4<]n3^F!*<#X+cT@kuEn1KpU
%7mS?J])h^O[YiY)_pZrmJNtqP<*@9H>RB[b:in'u'(J`=7f0/,^&E=jOo:`Tpme,SQjBdEHf;TRR<+3U$-p?i^a/!65N$e]64)kD
%:\YTQoX]/JpjsG#i6^-Pi,\Ke&4dMAX+<=A+RCN?X_o!=]c8kbp4WTIjB-(T@*CoUE;RPh<TG.CJb?D[?>gcj0(3El^f<q6!F18+
%[R#*fY"]Qmc$4a7!N1AgaPj:a-i3qW%N$6Nbc;6OjPlsE?D_U=;V+OnCmYZ?=`$u_e[s``3+-SsRJQ%Z"2ajsKjE`TV!Wd^O23'm
%;a1p>2P&^i9Mo];\Y3-,\/6F*3\(b$Gm]7]k_:\LeiHjI6F_!XE`#Y`RA!N5.$H,hpo6)-S-Hj@Z7'.56l=r.(l-M=jJ!2k=[ggs
%-JmU'\:G18PtcAffYEasGWe61KR\bgWC0W9NtDNuje/2rZO6+IGWog=U$Si:d!@(_=fEfH:em#h%*eTcBL,rX#X<9&%>>*'.'ibV
%R6bRR0ZCsKFb]85Hp[[>Zs_^'N%Z@*paUt`q5ESJ+_X/fkdqVKJgBPs"-rTPWYYoRH1_RI0IG"IDIZcF1IhNbL3eU830b]-=9@,P
%-DU?Sk!3l[j&92d&`&3c3/_HA_RH_md3N4l)/Y2-]7PkS\1g#CQp>ZQ`a`k9=ke#Rrj@<.I10WAJ?+:+?bPrTGF&8d48XU[qp0Vo
%`/I'`7gP^[M1X6.+BV2P&95'3J>IN..<99!%>YZj7"\mPKX#esPVYm1o2XnR4Q-tX]s/5jF!jS_0)%I@*,s@.`G=`RnQ1S$L5Rra
%Do5$ASi>8"=_--nSO-eY>Qgj]>:qBYVn_eCXLt&EVAdsV`ll8;=tR:Q*cS;-$Hbe'BS;f+mg+=CAN;[_m5h1d8KKGBS46=GJcppM
%&P<o60Qr_*Tg3i.9rgh#h+65!L^(-2<r_>*nKEsG'Q)!ho:pRY7$W1M/tgo2eoL8=8f1BSbQI<RQOLsSYR-NjldXWX@m4/(7`(][
%59q#`=BJ#/\=(9a'(J(ISh_Ri)s<s<pkc/07cA6T7%u:%E++im9%9<Y50XmPN1AhAqo_9>0F=kPA$KXZQ%Seb,945B?OhD@'(kf`
%s4/r=Ei$%JK2W:"ee^!iE1fK-#MPM5O6+0'9NZf:l1JqofB9*u^Yl,HIPS?a>=$Zh%dk<*_^2am@lkH8@QP>N"#G\1$JZK42R\88
%?I@C8mNt@ofWpA$=HJR1=GX&[+_ho/Dsr$0iB`ii!g(cc`HJJUM!a-GHo/9a47U_N%W3+1@QV)PSquci%I&*[#C"X[+?Wd?M='6P
%=<b2+)mI`B%eaBV[R3C<DgNnB`gmjE(K`SW6V1'i#Btn8JK3H9lXObO#i#&&*o,shCr_g14<OgpY#EZPEm/L!DQ&W:kV0CVN!=tR
%mK?u@%ccR&A#F3lOf,W,)%/$R(:PW!b+;Wq$aOnp]NC.^>t>V#h?LR\i/O1&'5PCSbUD\7HBIR%H5+jFbqm8_mPYpo\D4TI`#b4;
%9H)Lr<IX6lZkHetf:sICa"5WD"efl.%IjRO?K:aQ!b1Ye!?I:)8]Uq^>->l1*;#?YP8m+hE5I4&*,p?LTp:6gLAd7Pl[:A"O!2>h
%Cj-goWQ-#3V?:kijYe6$<gBSUT/.W8Ap$DIcU(=DKnaiPdXl/J@O+X8=\B]9je?uj6Bb5UfPj]!pr$-"JSa-gM.BiITeg7-`A#%)
%N?c@9Y\'lQ*'NV@I5-[E\eQL%[]ptEcR;JK^+]FC[I0i>TRM*%cR\H[UBK.<(*itI7@R)SYDr',9>XJD0mh?W+rWmO<09_Yj]s>D
%kXe#pGU!NU(^-Emd"K7LCEEn9;][mknN)h`&D%ZVj:7Gd`^Qfb\NTIO.$'GbGaU"FVZI-d6q@Le0ZM4_=$j_$k,p\*J>W]2;Q.kh
%KZFLb'n-eP':pZH>qg8=.uX`(fHT`7Ja\:@SgWi^gKB*oJ*+q>Q5>-mOK1+Hf7X\tEf*""6L.%m-,L0!nW5/j%csD2]?li+83KcH
%KW9kfAoj-I)gK63`oCF#%B_ZA.]co@2(7r>(<*%Mcn(4K,/.t,_DDFZ5XXrQ:Y`.q8kIrH"C1RI*t_HbcSD9-YIXP?D^Ul;Gema;
%^l*?F!4b;!$:PJ]11Od03(t#p&LBEQk[Du)k:`&"_>8I$(X,$D$8@"UnsQGNYKlGW(:49M61?-PSmD(qd7OZ9"3Vi[&B]R:P!WTb
%kI@,Y`$bMoQd,%!ZD/1Y9Pc9f&8EcQW=)X,F@%E'#>]Z#fJA(<JO8Ip+(61D&F^ND#UnUj"JU_K7RJL`8l/@,J9TY60:/=aINe@g
%H/]-Z;.a'4bB`uU.-Yd2m7Z6$_MSThCiBB3kDIOm4`U09OW;1S]HVW@R_nW_3(,;]Go13+?L11D_dmo[*XR:L(Kdne`0"W*N_on9
%(GHH@<[/HIGp/N*D20V/^::t5$YWe-$W%shblfFkiYNn\Q5]3WM8"RV$SaBK#`k_]W!8i^WUR?],iQiLi8j"I:c(H)mP8b_9.l#<
%7FqYqh9/R4j-iXi545*IP)kC-/-UjPM\QZuAE([]kW,5Hm0Uauq)SG^n6GItGpnjGkj]8tULROLPu8aEm=?s2]8YJn?H21[K^'DF
%"aM<-Ar*J&XPp5&kRhi`<(`p=#ng[*MdRMoX-/B-FCc1ae!PB,hk?s`R#^<r<BF^Ur"[5X\Y$`Z1q[si./NiV'eqbho_C$!T:>d.
%ZYPDG)?li04am=P[ihjjUsEDi)DY)Yp8F#!0i+FV;CL=]2<kV'l`Ih6pqu<'0lsYC/5_g!X\)9gLBY$ijQl)6O;B0.DlK<?G,/1A
%*Ws*@K5N+K/I+KE&rdFPDRK\Qcu/*C.rNNWW+J<=*'l8$]QFOP+q)md!#8@@5s4@c<.#Sd#n\[.Ku)':e3i3RL#T6Ao5%*li5J_q
%Fq%j^M@ep`+JtGIWeMQL/\m(#/VfWGM2<Dm"Y"/"W`kjJ5'WE,"(7W&,SkY?Whr(dVSETtkkY'ua+jCr9SlA>,=Hq2TK$p(IQWK=
%5)Ddl%1*c!1gFi2fi1A7R#3@+M71(;)'pGkH5+kq-nY4e0lhk5csI9/jLLRD4MLVl%Y<*H60h"43#J>N4oNa">6hA+GJjH[;j4Eu
%(LlqZF.31B)&`+H#Y988)gEf704I)S>S7ng2('=UVB";c'F:XoYbic+P;jAN7*V1!Ldoc,eKbcEH%uSo/>'=bHaL9.'F;_qL$fcO
%7XacAQ"T5641b`b8-M;(HdXkh*n(fcdtNo;,cE@D4Clqdd!b%\gRpi;3Y4S"*%T8l=cJSdps<6L-o=5A`jh87YDUp=Ku9TUGYXce
%B;\a8&VC]C8;'PemnNi+W:V;"!7+300@%#,o[$@4#1SuL\]g+uX%,I(3IdkQD9qVm0Qj);Z_sR;jbB\Q22H68XLX/\RA0BH22Jf/
%LhCI__'qa9l/eVubKO"`W?!d90Cu_6-uQci'3'C`a*d[PlK+`_f`4`G[kAniGNco%V6Ys`LboOOo+f>jUh@o>E3:pt7s#3DbAW?E
%l6&R'"r`0?SdY,j=ETat`D9I+J,AL^k`nMsO95^[@0L*#i:F\*6%o>K2;iI7"Kk9FC'7s[n1S^]]?^H3.7U=tJpGk%f7:d[>noon
%`fu-"'g(=`8mJkH?A\s$fQ#>N[;!pR`UJL>"]L^\Z?!E&>*ZSb!/in[)1iEf_#i*N#R`(I<5iQ*Pm;4+R51j/5f@]86%_Ggeb5O7
%d>[8IM#g%F*s^/Om;W-]I<*`.)\e_`6"=0*C6'lCQWsZhX/i5bjs4..%UBlrE!s-"76A',*O3*B-rEMHosB%eg!#anH9nr?X*nPD
%@!VoTG6;a?)QNYTOCi=4TYlp]FhU?(#nfA?-*,?8fXg.<+B;]A<Au;Qicj%]Ek67:H5=!&U7u$j>ZA.JHId[AcPho1(.2)ERpg,[
%(,ou<SKB2C,7JmE2@OnX2@L5KN@SbL`UC$DRA9/\>mqQHW2CI7_??/*$3iG3X>b&ZeLkF`OeITKY7DC;jq&HB:P#If7@kLP[G%T;
%4#FI:m#-Nj>!\Yqb*gaQ9piHh8ZtTHSs5KD)-Ii=P*J":&i([;@E04CapLpm6pWhY/k1@8K#*7L&qg^;XfVFsTibIVp(1dI'H0>!
%;[6QPhdf/MUr4>1:%[D6pWHV(=YA%0-eAFeQ;ahY,j(fo71TGi,RW)AV_5T>"[r+sQl27e3q`an`Gm,6lZQqQ9HTWU>F`1=/53cA
%ql!R)OlMQd_a86+b].,<9\G>oF`^?r%[0YAGQs&'A;4f**9QaC:rK#+<ni,G)ulc4bg1Upm_<mPJWLpWBgH"jn`?Jf.;F7oJRG.4
%WN/():.EnA2?*-:$4@uZ)^f%9P"/P9h%?X.)n"C!.<=#\O7%h2J,7$qSYJOf.C7C0_G9g);ALP8kV,t9'ZA/2?AZW/%Q''[iZq2X
%0T6I^hMp)/?!U0)2^d#4G;uqPMpSV4W0j/&0i1WFP76k/%<Oo]4Ugc4ZABJ:ODf_L(?EAhOa?B*epnXX^/Z&9$UKE,$M.d6=F\;+
%i'^ga2eC<5nRL+m77!pWR]:8!B$BWbUadHt6nU1+BIK`hr$A8H/RYGAb_Lo(af&OA@S/*k.9fA@VaoU^97l#D0j$qSm-lkT8":e=
%l**`m!p@Qofg%S.R6[PTegPF+KIJ_SM$Dq>0.B7Sc,bWrDm,o$H>"!k:Iu_WP'8l:P<t+$,(>%0M/2ML,O44ZQ\5!Dlof>$pVu'k
%d_-X-DY/d<(4*=s)UoQVobX-l?[=ispMblBKH1i]o/mWUeKCDt%=N.-.GEfb(1`F:\:jU,W/Uou&F7:Z56lHs+EYg^f,HnY-.D#9
%)eYlO(b<Q7n$#%F;n.)1$FbRTMK,ASIr^ZOS:]GS.2TX<ilKX!G`3]eJ]U5Rhn30Dl!V.hj?:P1(nq4.g^QL[*lu?#B<ETjKHI4A
%Njt\N&aesud_R^I*2sg9I/M"'*6pkRGk&ZVNik@ON>2dL'4jt9Do^JnqQXI\3\/-`DZF9C"JKTr3ZTW[Ro!m)N[V"1g"_'`fF)/n
%WD%i4?7bYgOOjlW+Y9u&Y98Y^g>EU#^'gddi<4UZPZB%MjC/^QQWiYejN'aBpg>*P'j+bA!t_V,0.AdgpmW@e&GZT3Y_,fDK+sf1
%+NgAZpb[k#O,QR_1&iPk]>QI.\MmRi'[Mo1JX9D:1-N!_R%>1S"=C#]WKg<ni;@"9a,nI$q:hOgE:q5W4d]hINlV_Vnd8<1:'DN1
%C_%"a8jLT2A5HqN-Xk.EAmdl;,LJPd&k\Du([IocMJ*^l`CV?/ndZ\PUf?VV:nR;KZ5>T57Jk4n47kE;-k2A`m&a2`Ooslqj^<c0
%p@L_%c?&u:A+rWWg\f[tS$c>:US;g>TJq(Te5m\p%dJ/"#3BA*:gC,<OIfd(&;h<T/I-Gs<Zla0:1kr($5<WV+@R4cqbc4,)OKNH
%^i5,r;$hOX#ue:_e"DLU?pO:oZC"FMZ)=S@4/4&7i<mR/`D)G5@pH;t))VpL?Ej][Wk+4*EM2+\5lGTg8"lP->HC\HS:i>\)`eaF
%@N:b:3<=Gi/fA\\2'k'`b":n3CE<0/<B"JnFT^o-dWsB*IRN@Ahg4:e/PN53iq$FsNE=Q7l-s-rV>)s=7T$_M$jg4J_%mEqMl/CC
%8>sn(iF7!J9LUdqWOj@:BZkam`tM@-\6V5\:PrYaV*SW%%/\46)(j`l$:Yp0F(J&t8YR2`DY/^:km+u$+8QWPqLs4mQeibYYKu7g
%*GlVUM(fV>JW+H^Wf7T%*W#=m?Zoh"]Sm)X`4JVn!n0Lt0kOtAIJ]5#DNGi(3WRj2&O]aI(aZ8e<ksM@oQm=bVhrI,#q)nDK0JcI
%.P=1W!TNl(-sho]TH>N40iajadNRY'OW"='\bP*a.4]lpnc^Qi`P_6b"Vre:jcXsq^3QmpUuEAkG=t3B*%+(s'0sJDZN1Mhg,]pH
%eS<!6o7#^H8g$DC^@dBHHgnFhS?`DrR;VV5Q=d3'^@dB2Y(2A,7mhYBe#21k=.PLRgR5-Z$>.E<i0jjfhdZ65M[UUA"6k'>/q8oj
%-%hr7^(^ObGAJ)"":@?.)_$uTk7c'uNN-D`HuU-aX%P`\GG,rKh@RC:N]Ube"ZO`$T=@%VL]e1BU0pk^Zrt*nEl6g9Z2>lQ:!TI#
%^?>Y0T5MQENZD`]kDbP&M&HYb\*<8d;4pH,Fk%2PmW(ChWn+^Vd`T6f5KOaObQ/sn+8,<K!?-W3hKHHODiS]9jpNp*+JK6e$&D)Z
%d.lOE(@AG4]4b4jpd?jN/n@ecH_X0:TSJF+@CB!`!QlbS7:d&F$AsCZ=ngf8$1gfN5eM=or?'eplHT/p>s1hMZ8?<X0-8]fah4R'
%_Ze,*W<R?i^K=aTpVcZM%Zr8/mYRhKThhmKjlQX[-PVB()*P,8YQj)029qh!4UI%e&-JS_a3=\-)p\QE46Up2$BJcY4/,E7_><*%
%N!.`o5X[!'_%Ta6Zg=(_4Lcg30a8hRNr1RY'=W^JQ6;0TAMJY83K)D'J>k&cQ-!a>6_d?uGQWuQBL=MTXm7KOaMaa=$Q"j.BmF,)
%?f9Jo6n1AT!_6;V>))AZ8V>d3j1]+X4sLq@^?]J>]AgW(AF,.-KP-EXh)srnHh&>&h#]^T80o#,:7pe[4@U5K905ap8mof-(jYuQ
%emOk#,0.6$4fGMF`\%NjpI.BJPLYFKRF%9N>"IDHM;iA/8Q@D_d5TecUQr9e6??:C"JU!D]^i49Ap%J'e.*!']0-(a(g$0HqRHPj
%?+J].nU`<Jas;H$oaL9Q>e?^+h.D1*=&oIL'T,MFCIjhu4aUm.1'hD^":6\m_Qaj'.(Z.17%u:%0f">dL)KAFl(I?)J/%,SW^`N&
%H\KdgMlG5=H*\4''n]`QOJA3@9R;1Bqht*IdZ5Lp`tsa:ie\o13!>YlK!#n90]%n::3O?!LGi3_oIqqd(F\H1'Re():QtsujX[??
%d'ATX9bq=VG*L1EP7YS:%-4-K-R$DU:PE"H`K$`\_A@@"em+/M4J=@\Ln!R0F<0UML[)E`7qV0S'V0jfm##226#YYngku\dMcC<5
%)W[V+m`EQ`T:\T&1NW^r`[@9Ri<-*C8c'^PS;7TS'S&q,&eO&39ICqcqh9C_#RW]E8g:ArX:%BJT@S/(&e<MX7-(q&cqnc,4_'Ec
%-6U5d]/$nk`iL6hmoORSj^[&8F(+EUE^YW:'-MDYYiG4i8Pt5YM-]Gaf3%`Pfhir#Rrk]R#"$P6L[,6(XtpVumQCTf#t#cVa#/c"
%X,Y+<bII,\ApGU!YE."RUEGrZ]1/n<lOgedX4fh8mUGrSPRu'oaCX.mC/4!(pnDj!`Fi$XV=fDI$Pq,s5dQ#uT<j\sF@a)D@uh.9
%7tVa)J%lI&EB@7.IKir(_%$F@7kXcK+hf=E/j!GF"6m!t32J723s<9f\;7GPk^5+q8VFfU:>VTLI&Wl/j\8,j"Drr:kj7ob`U&Hp
%"RX"!bII%X(jLi2"V6H/CE0)>,f5]O/HI2VV>B25(t/INq^g/B.MpQXnHM@n$1IB'\k5,CCJS<]>Y=g[d<#e9KPup0hLEoHTX[.:
%?pHU]TeE!""U\BcaHILqI9349dgL'YKul24hK2)RAl3fCKINDKSHW/7h05'U2r-soH?KU/kf#eIGnVmc3[6O_F^$b(2kW?OGDINf
%IVaWn<nG(PRHeVQOo9L(E_#Z84u2*_84e<ZIHtJKDGRTjrcGI)@%[,u=gD1YiS[5/imSaC?X7/c*)+sd%^p0LWt.D]@;5n7L?ZIe
%n+KDX+oE*9)g$t'W22H4M^3<L`VEsP_?=aUL)YM6'l,keAipMn%$XZsQ4/;3Y%1uGB8NdNUmKN&S4^,%!187-+qR0fhXOa:U+(C>
%,o6U@2@k*@RLQD3^oOnTS'K6.?r=rA#`<m4l0[_49Mb;VXGb"s/;U8n4>Ngpp.9C%*F2]KdP(cb73MsM,fV-G;ZK8k'kTjC(q[Xi
%nM2T:`9*4d0R=)eX0=DqlTZ.FJ.^4#;1=X-3CRrV`P\Vj80;,'Z!)f,-`hZU<MiZ!b'KF$"tQdP>Zg;O4ArPs]F;jpCOKFT97Np/
%AT=QM7mVR.G0(n)O+=l,c/L8$nR1h8)c.eeEVOTO?PYk(W^9(?k^Jq5"`kpa+uUQ==>OQE$/Pe=jhRa)A(CtVJj<kP`n^;L*mT]\
%B9NkCYej>s#/rPCMF>7+\-2O'#cGgqM1CLHU5rl5r;k)p^\LV+96d4oKZfM"<G2&`f^=6'lMIEZm_?f5+Iuu/Km!U"X=YuZ(d=t(
%qVk5fC^1?bV!YsSPG@73nYsMBds7m6`I)I^0S#+c!LTB_?CZTr7riElVT!e-6Bg>f)rm[9-(,&LUSSkr=&W$g[,bN4Oc<X5al(o-
%dP.Ba0Z)c+dlO)ER22_VF+r:e4\pMNK*@WR9cOIi`L)GH1f9!6%V>-3J&6.dmHsY8Uorsm4Ap7ee%f!hUuAQN`o%&mNel1H@,b^_
%WOF;Q[bg;551Q-J>,eSRU_;+\rYRQ\7R]>94<T(3TVbbmf\iW<W2E[TbDZ"e/kO`:+Mq4BP7Y4\hOa6ik\6qe0d>EC!7T@01P.cF
%)^h).IEB#IF\q0]N66^*ip@X/#?+ZDd%Br#%]i_Al?\>MK./<2YeJ7G:F"Z&$SCa1\P@1NiD/%cANB^9?dq'8p)-g-/d$=b1MR-;
%Y+>4=d-6Jgq$[2@s&KnP'/4HDF@:a$gY7a35l+r1<'iYb;-PZZrOCiU)%G"K7cF+"NkQt>lBrOu$1p#2-86ki1%J52.!HklRaa0h
%"0?0-M&/JJ'.!JmQ`NgZA?1lO6<%M2;:Cn#Hf(M!U8-!npp;f%o(J%s?JJ=R:X<ZOPE'4!)c$I,6,dJO`-ZOITZZ,1N.KO<D4ea3
%3L(VCao(*9KJQR?KPXpm6_4*IQbTR\*OR#iB4+_'Z_;L50)??Xet.OXZD#id&V","HAd>r>qAOc<*>iF^foC!=*9I.KDMgm,'j;t
%GCjBN`_bqU0cM0:7B;%g%s2D=*/8_#?C/'n.bWlog^1no3Bk`CS,[g6Yi[R$absdOFELmfC2'2k/__#JX"-NT7Q?RhJ]u%b?W?Vk
%B+jdt)q2!_I)mu&ir)"U\,)rraPmtrT/iDY&.&GKCsfWDEiA+$%Dbe;o7.!A@Dk$#m@J"*\r8">Tg+r@,:H<=KG3C/Q%oVi<QRZQ
%]!@KtD+qUUmr0<Z#0i!okdilCa<W$QA1n-HH9a`uM[)7*1TH\1a4#tUP?f]#OCdWEb&6R0Out(JO"M?8a>1^BW%A8JDM/%YH,>)r
%JWo7S>nb(/N,?"?'(Qn'NAf1_;;g2;Tg:RY=(m4@*`sI-cE`n)aD)>dejhg^NIC]3Tcf:O]cI@MKafmQNh%4#W)"E2$n!gM?oTQq
%c0dtuLF9]!SH!%\#mu:"JE46sfe(Donl3&R`+#Opf*Bq^40.#<d`9s-jMDErUd?&b%@F+gZG,esKSQgsd30(pfCN1.P)f6M?(MC^
%Em@,'c%8Xfm+.joAebDn8M,8cg<%`[N)`o,C!]&78G*.."etjF\gp_Yfs3>d#38m)P$5$s0:Ccj4$:q7ju9).lq0fIEEN^7;\p+3
%kK<0?_0>k)11PbNdgp-0nC4?bgP!:9cpLon2[Y]Yig:YLE?*-f:qE_k\uZq;gqN,g5tY=<Wf^nf&)Q7F'Ri'iDN\;S)%`!mC#`?)
%@RKU/-8cC*(WUuEo@0EmE>#,g3>eoO3Wr@u)@G2^f1`7nDsF#nF?L@m6qcC5j0^(l"=HPtVFU"+';?fP05nXgradMW#G4u`4Vb!'
%jlrbBDA24WLg`1g]_!)a1.Gl\N/,#f=_7NH6erNs3YW&T<,L<Y$o&VaCin-XoN.2*G?(([`E8I".]WgPBi(a<8;+72At*IPm[Xh(
%f5.TZ1+nZ!]\<dl:H;J8h-APS,*j3.cXNO+WDDn\la/4*-&8J2?#gcYIptWWK\_,snJ">]6nF'IR;!3C0B!eD&3&jd'UG_#XFX(V
%AXSA3_/d_13bIXb>ZYT#P8WmF;4r0s%Mja!k"\2emAp(nYYAY-o].`\^nDsa8r,>:2ss':&MjYIieoEg[m(FW\(2.E$*#`Q;<UTD
%!;E!PHXq3-]ZHLViHs'uO3=:k+W!mU?06@Jqa9Rhq>Ql@.*sDFR(\Gd5e(0UM=L*"&8LTiCUURNXhsu0+gEG[a%>K8B[c_n:`pG3
%.2(DZ0eU%BP0#Mb+pNbM3/L%-hP7iIO@hYClH_)Sc?&.#A;e\#.gKfVIqE$\@a05*;EI#]39_pu,BP<d&$.uU97F]AlVl6mf5SqK
%IT5%Q0)Y;Rci8N?^=BA#b!.%3k%5V'+)h:FJ+W^s*Io&hMsl8E#t$X,(731g@V)`f?R^,A$39thou"Mu/i5Vs6FUtiVK`6;HSHQb
%/hh13mJ>S'EW:U^<gol*HDT$f&*,\JoP[WV=R;+@3i,.P,j,6DImI\WAb]\JP@(LOb!KsCVZAKa?b!3X[L:VhV>]A6gJ6^S,unV8
%RU,.,(AsE.D-&dSB"O5kgbo+"#_$;J(`m#>>Pmp1rrW@K]Su~>
%AI9_PrivateDataEnd
